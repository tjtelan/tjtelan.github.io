<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>T.J. Telan - rust</title>
	<subtitle>Practical DevOps &amp; Developer Experience</subtitle>
	<link href="https://tjtelan.com/tags/rust/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://tjtelan.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-04-27T00:00:00+00:00</updated>
	<id>https://tjtelan.com/tags/rust/atom.xml</id>
	<entry xml:lang="en">
		<title>How to Build a Custom Integration Test Harness in Rust</title>
		<published>2021-04-26T00:00:00+00:00</published>
		<updated>2021-04-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/rust-custom-test-harness/" type="text/html"/>
		<id>https://tjtelan.com/blog/rust-custom-test-harness/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;This is a post I wrote for &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.fluvio.io&#x2F;blog&#x2F;2021&#x2F;04&#x2F;rust-custom-test-harness&#x2F;&quot;&gt;Fluvio&#x27;s blog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Check out &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;infinyon&#x2F;fluvio&quot;&gt;Fluvio on Github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve posted here for archival purposes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;The Rust logo plus the Ferris the crab holding a screwdriver and hammer&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I ran into a problem effectively using &lt;code&gt;cargo test&lt;&#x2F;code&gt; in &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;infinyon&#x2F;fluvio&quot;&gt;Fluvio&lt;&#x2F;a&gt; for integration testing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-talk-about-integration-testing-in-rust&quot;&gt;Let’s talk about integration testing in Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-talk-about-integration-testing-in-rust&quot; aria-label=&quot;Anchor link for: let-s-talk-about-integration-testing-in-rust&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While creating integration testing for Fluvio, I ran into a problem. Organizing and executing integration tests with &lt;code&gt;cargo test&lt;&#x2F;code&gt; was becoming inefficient. We needed to standardize the setup of a test environment. &lt;&#x2F;p&gt;
&lt;p&gt;As a lone developer, you can apply one-off customizations when running tests locally. But if you try to extend that strategy to continuous integration, you’ll quickly find that making changes manually becomes burdensome. CI encourages testing many different configurations, which means a successful CI plan requires easy management of test harness variables (a.k.a. Not manually updating variables for every test you need to run).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo test&lt;&#x2F;code&gt; is just not equipped to handle this specialized focus on environment setup, or the cleanup&#x2F;teardown needed after a test is run. When using &lt;code&gt;cargo test&lt;&#x2F;code&gt;, these crucial tasks could only occur outside of the harness or within the logic of a test. Neither of these are good choices. Outside of the harness is not ideal because these processes end up too disconnected and hard to maintain. Likewise, including setup&#x2F;teardown within the logic of a test is inappropriate because it creates mental overhead for a test writer, and may obscure the results of tests.&lt;&#x2F;p&gt;
&lt;p&gt;I needed to find a way around the limited functionality of &lt;code&gt;cargo test&lt;&#x2F;code&gt; -- keep reading to find out how I did it by creating a standardized setup and teardown as part of our testing harness.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-cargo-test-work-by-default&quot;&gt;How does &lt;code&gt;cargo test&lt;&#x2F;code&gt; work by default?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-cargo-test-work-by-default&quot; aria-label=&quot;Anchor link for: how-does-cargo-test-work-by-default&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There is a distinction between unit tests and integration tests in &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch11-03-test-organization.html&quot;&gt;the Rust book&lt;&#x2F;a&gt;. The distinction is less about testing strategy and more about defining Rust’s conventions for test organization.&lt;&#x2F;p&gt;
&lt;p&gt;The main points are that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your tests are annotated with &lt;code&gt;#[test]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;libtest&quot;&gt;libtest&lt;&#x2F;a&gt; harness enumerates through all of your tests (a point we’ll revisit later in more detail)&lt;&#x2F;li&gt;
&lt;li&gt;libtest returns the pass&#x2F;fail status of the execution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-do-i-need-from-integration-testing&quot;&gt;What do I need from integration testing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-i-need-from-integration-testing&quot; aria-label=&quot;Anchor link for: what-do-i-need-from-integration-testing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Libtest doesn&#x27;t specifically offer anything to support integration testing patterns.&lt;&#x2F;p&gt;
&lt;p&gt;Setup of a standard test environment – especially in a complex system – is essential for managing expected behavior when making code changes.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately libtest does not assist with setup or teardown. I needed the ability to abstract away the setup and teardown of my test environment from test code. &lt;&#x2F;p&gt;
&lt;p&gt;This task will be performed either way. Without harness support, setup&#x2F;teardown will be performed via external shell scripts or padding the setup&#x2F;teardown process within every single integration test... (no one&#x27;s idea of fun).&lt;&#x2F;p&gt;
&lt;p&gt;It isn’t convenient to manage setup and teardown in a different context than the integration test. This kind of testing overhead leads to hard-to-reproduce and time consuming mistakes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;where-do-we-get-started-with-a-custom-test-harness&quot;&gt;Where do we get started with a custom test harness?&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-do-we-get-started-with-a-custom-test-harness&quot; aria-label=&quot;Anchor link for: where-do-we-get-started-with-a-custom-test-harness&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;By default, libtest will compile each of your &lt;code&gt;#[test]&lt;&#x2F;code&gt; labeled functions into their own binary crates (with its own &lt;code&gt;main()&lt;&#x2F;code&gt;) and executes it as part of the test. But we’re going to build all our integration tests into a single crate. This is recommended in order to speed up compile time ([&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;rust-compile-times&#x2F;#combine-all-integration-tests-in-a-single-binary&quot;&gt;1&lt;&#x2F;a&gt;], [&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;2021&#x2F;02&#x2F;27&#x2F;delete-cargo-integration-tests.html&quot;&gt;2&lt;&#x2F;a&gt;])&lt;&#x2F;p&gt;
&lt;p&gt;First we’re going to create an integration test directory at the root of the crate where we’re going to build our integration test focused binary.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ mkdir integration
&lt;&#x2F;span&gt;&lt;span&gt;$ touch integration&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# Then create a main() function in main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In your Cargo.toml, you want to add &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# We&amp;#39;ll revisit the `inventory` crate later in the post
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;dev-dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;inventory &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;integration&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;integration&#x2F;main.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;harness &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This tells cargo test to not use libtest when running the &lt;code&gt;integration&lt;&#x2F;code&gt; test.&lt;&#x2F;p&gt;
&lt;p&gt;When we run &lt;code&gt;cargo test integration&lt;&#x2F;code&gt;, what cargo will compile &lt;code&gt;integration&#x2F;main.rs&lt;&#x2F;code&gt; and execute it in the same manner as &lt;code&gt;cargo run&lt;&#x2F;code&gt;. This is all a harness is from &lt;code&gt;cargo&lt;&#x2F;code&gt;’s perspective. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-setup-and-teardown-steps&quot;&gt;Add Setup and teardown steps&lt;a class=&quot;zola-anchor&quot; href=&quot;#add-setup-and-teardown-steps&quot; aria-label=&quot;Anchor link for: add-setup-and-teardown-steps&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Next we’ll lay the foundation for our testing pattern. We’ll create 2 functions, &lt;code&gt;setup()&lt;&#x2F;code&gt; and &lt;code&gt;teardown()&lt;&#x2F;code&gt;, and add them to our &lt;code&gt;main()&lt;&#x2F;code&gt; (with reserved space in between for our future tests to be called).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;setup() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Setup&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;teardown() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Teardown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Setup test environment
&lt;&#x2F;span&gt;&lt;span&gt;   setup();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; TODO: Run the test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Teardown test environment
&lt;&#x2F;span&gt;&lt;span&gt;   teardown();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;collect-all-integration-tests&quot;&gt;Collect all integration tests&lt;a class=&quot;zola-anchor&quot; href=&quot;#collect-all-integration-tests&quot; aria-label=&quot;Anchor link for: collect-all-integration-tests&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To do its job, our test runner needs to create a list of all the test functions. Initially, I thought there would be an easy way to do this by leveraging &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;libtest&quot;&gt;libtest&lt;&#x2F;a&gt;&#x27;s &lt;code&gt;#[test]&lt;&#x2F;code&gt; attribute. &lt;&#x2F;p&gt;
&lt;p&gt;I dug around in &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;libtest&#x2F;blob&#x2F;master&#x2F;libtest&#x2F;lib.rs&quot;&gt;relevant areas of libtest&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;master&#x2F;src&#x2F;cargo&#x2F;ops&#x2F;cargo_test.rs&quot;&gt;Cargo test&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;master&#x2F;compiler&#x2F;rustc_builtin_macros&#x2F;src&#x2F;test.rs&quot;&gt;Rustc macros&lt;&#x2F;a&gt; code, but long (sad) story short, there is no straightforward way to reuse libtest for the purpose of test collection.&lt;&#x2F;p&gt;
&lt;p&gt;If that surprises you, then you&#x27;re like me. I had hoped to use the test collection functionality from &lt;code&gt;#[test]&lt;&#x2F;code&gt;, but it wasn’t clear how I could accomplish this. My mental model for how &lt;code&gt;cargo test&lt;&#x2F;code&gt; works needed a refresh.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we’ve removed the option of using libtest, so that gives you 2 practical options for collecting tests:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Manually modify &lt;code&gt;integration&#x2F;main.rs&lt;&#x2F;code&gt; and add your test in between the setup and teardown
&lt;ul&gt;
&lt;li&gt;A quick and straightforward solution if you have a small set of tests&lt;&#x2F;li&gt;
&lt;li&gt;This option requires us to add new tests to this list, which can be error-prone and tedious as we grow.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Build a test collector. We generate an external test catalog, and modify &lt;code&gt;integration&#x2F;main.rs&lt;&#x2F;code&gt; to execute tests from the catalog.
&lt;ul&gt;
&lt;li&gt;This is a long term solution, which we’ll be covering for the rest of the post.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;building-the-test-collector&quot;&gt;Building the test collector&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-the-test-collector&quot; aria-label=&quot;Anchor link for: building-the-test-collector&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For this test collector, we&#x27;ll be utilizing a crate. The &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;inventory&quot;&gt;inventory&lt;&#x2F;a&gt; crate is a plugin registry system. We&#x27;ll be using it for all the heavy lifting in our test framework, which means we&#x27;ll be treating our tests as plugins.&lt;&#x2F;p&gt;
&lt;p&gt;In our &lt;code&gt;main.rs&lt;&#x2F;code&gt;, let’s declare a new module &lt;code&gt;tests&lt;&#x2F;code&gt;, where we can organize all the integration tests.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ pub mod tests;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn setup() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;Setup&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn teardown() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;Teardown&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;&#x2F; Setup test environment
&lt;&#x2F;span&gt;&lt;span&gt;   setup();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;&#x2F; TODO: Run the test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;&#x2F; Teardown test environment
&lt;&#x2F;span&gt;&lt;span&gt;   teardown();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our new module, we’ll start by creating a struct to represent a single test for the plugin registry.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; tests&#x2F;mod.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;IntegrationTest {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;test_fn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;inventory::collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(IntegrationTest);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, our struct &lt;code&gt;IntegrationTest&lt;&#x2F;code&gt; has 2 fields. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;&#x2F;code&gt; is a human-readable name, which can be used as a key for test selection.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;test_fn&lt;&#x2F;code&gt; is a pointer to a function whose signature is non-async, takes no args, and does not return anything.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note:  You can use functions that take args, and return things.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; test_fn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(String) -&amp;gt; Result&amp;lt;(), ()&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we call the &lt;code&gt;inventory::collect!()&lt;&#x2F;code&gt;macro to instantiate a plugin registry. When we write our tests, we’ll add to the plugin registry. More on this next.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-new-tests-to-plugin-registry&quot;&gt;Adding new tests to plugin registry&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-new-tests-to-plugin-registry&quot; aria-label=&quot;Anchor link for: adding-new-tests-to-plugin-registry&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We’re going to add a new basic test to the plugin registry. Start by adding a new submodule called &lt;code&gt;basic&lt;&#x2F;code&gt; in the tests module. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; tests&#x2F;mod.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;basic;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the &lt;code&gt;basic&lt;&#x2F;code&gt; module, we write our basic test &lt;code&gt;basic_test()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; tests&#x2F;basic.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::IntegrationTest;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;basic_test() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Running basic test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;inventory::submit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(IntegrationTest {
&lt;&#x2F;span&gt;&lt;span&gt;   name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;basic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   test_fn: basic_test
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll use &lt;code&gt;inventory::submit!()&lt;&#x2F;code&gt; to register our new test with the &lt;code&gt;IntegrationTest&lt;&#x2F;code&gt; struct we defined earlier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;name&lt;&#x2F;code&gt; is a friendly, human-readable name. We can use this name as a key to search through the plugin registry.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;test_fn&lt;&#x2F;code&gt; takes the name of our test function. It has the same function signature as we defined. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;running-tests-from-registry&quot;&gt;Running tests from registry&lt;a class=&quot;zola-anchor&quot; href=&quot;#running-tests-from-registry&quot; aria-label=&quot;Anchor link for: running-tests-from-registry&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We’ll finish this example up by running all of our registered tests&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pub mod tests;
&lt;&#x2F;span&gt;&lt;span&gt;+ use tests::IntegrationTest;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn setup() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;Setup&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn teardown() {
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;Teardown&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;   setup();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-   &#x2F;&#x2F; TODO: Run the test
&lt;&#x2F;span&gt;&lt;span&gt;+   &#x2F;&#x2F; Run the tests
&lt;&#x2F;span&gt;&lt;span&gt;+   for t in inventory::iter::&amp;lt;IntegrationTest&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;+       (t.test_fn)()
&lt;&#x2F;span&gt;&lt;span&gt;+   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   teardown();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo test integration
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling blog-post-example v0.1.0 (&#x2F;home&#x2F;telant&#x2F;Documents&#x2F;blog-post-example)
&lt;&#x2F;span&gt;&lt;span&gt;	Finished test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.21s
&lt;&#x2F;span&gt;&lt;span&gt; 	Running target&#x2F;debug&#x2F;deps&#x2F;blog_post_example-e042d787684bb333
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 0 tests
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 0 passed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;0 failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;0 ignored&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;0 measured&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;0 filtered out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;finished in 0.00s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 	Running target&#x2F;debug&#x2F;deps&#x2F;integration-7ed2452642c6f3b6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Setup
&lt;&#x2F;span&gt;&lt;span&gt;Running basic test
&lt;&#x2F;span&gt;&lt;span&gt;Teardown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tips-for-extending-the-example&quot;&gt;Tips for extending the example&lt;a class=&quot;zola-anchor&quot; href=&quot;#tips-for-extending-the-example&quot; aria-label=&quot;Anchor link for: tips-for-extending-the-example&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The example runs all of the registered tests. But here are some useful impls if you want to extend even further. For example, adding a CLI, if you want to select individual tests. Or provide options to customize setup or teardown behavior.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;IntegrationTest {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;all_test_names() -&amp;gt; Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;       inventory::iter::&amp;lt;IntegrationTest&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           .into_iter()
&lt;&#x2F;span&gt;&lt;span&gt;           .map(|x| x.name)
&lt;&#x2F;span&gt;&lt;span&gt;           .collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;from_name&amp;lt;S: AsRef&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;(test_name: S) -&amp;gt; Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt; IntegrationTest&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;       inventory::iter::&amp;lt;IntegrationTest&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           .into_iter()
&lt;&#x2F;span&gt;&lt;span&gt;           .find(|t| t.name == test_name.as_ref())
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to see more of these ideas extended even further, check out &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;infinyon&#x2F;fluvio&#x2F;tree&#x2F;master&#x2F;tests&#x2F;runner&#x2F;src&quot;&gt;Fluvio’s integration test runner&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We use the CLI to customize setup, handle async testing, and we use an &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;infinyon&#x2F;fluvio&#x2F;blob&#x2F;master&#x2F;tests&#x2F;runner&#x2F;src&#x2F;fluvio-integration-derive&#x2F;src&#x2F;lib.rs&quot;&gt;attribute macro&lt;&#x2F;a&gt; to collect tests.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Rust’s testing ecosystem in the 2018 edition is great for unit testing. But for integration testing it still has room for improvement. Custom harnesses will become more necessary as Rust gains new developers. &lt;&#x2F;p&gt;
&lt;p&gt;If we want to avoid reinventing the wheel, we need stable support from &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;libtest&#x2F;0.0.1&#x2F;libtest&#x2F;&quot;&gt;libtest&lt;&#x2F;a&gt; or more examples of how to perform test collection and patterns for setup, test, and teardown workflows.&lt;&#x2F;p&gt;
&lt;p&gt;If you made it this far, thank you for following along with me! I wrote this because I could not find a guide to do this before trying to do this myself, and knowing these things beforehand would have made it much faster. Hopefully others find my experience helpful.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust in 2021</title>
		<published>2020-11-17T00:00:00+00:00</published>
		<updated>2020-11-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/rust-2021/" type="text/html"/>
		<id>https://tjtelan.com/blog/rust-2021/</id>
		<content type="html">&lt;p&gt;I missed the official call for blog post submissions, I still want to share some ramblings of my hopes for Rust in 2021.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll split this up into two sections: What I hope to see from the community, and what I hope to see for myself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-want-for-the-rust-community-in-2021&quot;&gt;What I want for the Rust community in 2021&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-i-want-for-the-rust-community-in-2021&quot; aria-label=&quot;Anchor link for: what-i-want-for-the-rust-community-in-2021&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;i-want-to-see-rust-shed-some-of-its-reputation-for-being-hard-to-learn&quot;&gt;I want to see Rust shed some of its reputation for being hard to learn&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-want-to-see-rust-shed-some-of-its-reputation-for-being-hard-to-learn&quot; aria-label=&quot;Anchor link for: i-want-to-see-rust-shed-some-of-its-reputation-for-being-hard-to-learn&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When I was learning Rust, I thought it was harder than necessary. But I would admit that it was due to writing strict idiomatic Rust while I was still figuring out how to be productive.&lt;&#x2F;p&gt;
&lt;p&gt;I think learners should give themselves patience to learn Rust by writing bad or mediocre code first, and focus productivity later.&lt;&#x2F;p&gt;
&lt;p&gt;I am not exactly sure how to create the conditions for this outcome. Maybe more people can publish more Rust that looks messy but “just works”.&lt;&#x2F;p&gt;
&lt;p&gt;I know that Rust in Action is being written and it is for an intermediate-level audience. But perhaps this looks more like encouragement to beginners to ignore the warnings from the compiler. Just write Rust code and form your own opinions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-blog-posts-from-developers-and-management-using-rust-at-work&quot;&gt;More blog posts from developers and management using Rust at work&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-blog-posts-from-developers-and-management-using-rust-at-work&quot; aria-label=&quot;Anchor link for: more-blog-posts-from-developers-and-management-using-rust-at-work&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For 2021, I don’t even care if it is from one of the many blockchain-related companies using Rust. I want to read more experiences that lay out the decision of why Rust was chosen and how the experience has been.&lt;&#x2F;p&gt;
&lt;p&gt;I am especially interested when expertise is in another language and a comparison can be made to the other language. Emphasis when performing a rewrite.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dropbox.tech&#x2F;infrastructure&#x2F;rewriting-the-heart-of-our-sync-engine&quot;&gt;https:&#x2F;&#x2F;dropbox.tech&#x2F;infrastructure&#x2F;rewriting-the-heart-of-our-sync-engine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s great to hear Rust used in complicated, low-level development, but it would be normalizing to read about more trivial types of applications, just as a way to highlight Rust as being good for general purpose use.&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotally, I feel like Go has been growing a reputation as being suitable as a scripting language kind for a while and Rust could also check many of the same boxes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-rust-in-devops-tooling&quot;&gt;More Rust in DevOps tooling&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-rust-in-devops-tooling&quot; aria-label=&quot;Anchor link for: more-rust-in-devops-tooling&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In my experience, the cultures surrounding Rust and DevOps are very similar. They both seem to attract cult-like appeal that demand adopters to adjust to thinking in a different way than they may have been taught.&lt;&#x2F;p&gt;
&lt;p&gt;The intended reasons are for a “better future experience” that usually alludes to improved cooperation at a non-technical level.&lt;&#x2F;p&gt;
&lt;p&gt;The implementations of Rust or DevOps shift considerations of future problems earlier in development. Possibly experiencing some of the friction earlier.&lt;&#x2F;p&gt;
&lt;p&gt;Rust’s benefits are often placed in a context of pure development benefit, which may be ok for now given it is primarily Devs that are writing code. But as a user, there are a few tools in the space that I’m aware of that support DevOps culture (e.g. Habitat, Linkerd) and I want to see more of them.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Link regarding rise of Rust + DevOps: &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;d2iq.com&#x2F;blog&#x2F;rust-devops&quot;&gt;https:&#x2F;&#x2F;d2iq.com&#x2F;blog&#x2F;rust-devops&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;better-rust-interoperability-between-languages&quot;&gt;Better Rust Interoperability between languages&lt;a class=&quot;zola-anchor&quot; href=&quot;#better-rust-interoperability-between-languages&quot; aria-label=&quot;Anchor link for: better-rust-interoperability-between-languages&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Rust is entering other ecosystems through libraries via &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code&quot;&gt;FFI&lt;&#x2F;a&gt;. People don’t even have to know or care if they are using Rust. &lt;&#x2F;p&gt;
&lt;p&gt;However, if I’m writing the code myself, it would be nice if FFI were done without needing to be so mindful of C as the common language.&lt;&#x2F;p&gt;
&lt;p&gt;C++ and Java come to mind as currently Rust interop is a complicated dance. Rust to Javascript is improving through the Deno runtime, or through WebAssembly.&lt;&#x2F;p&gt;
&lt;p&gt;My motivation is that I’d like to work in the ecosystems where these languages are most often used (Web, Mobile and Embedded), but I stubbornly want to use Rust as much as possible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-shared-experiences-from-people-picking-up-rust-as-a-second-language&quot;&gt;More shared experiences from people picking up Rust as a second language.&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-shared-experiences-from-people-picking-up-rust-as-a-second-language&quot; aria-label=&quot;Anchor link for: more-shared-experiences-from-people-picking-up-rust-as-a-second-language&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The borrow checker has a reputation that scares people away.&lt;&#x2F;p&gt;
&lt;p&gt;Especially if they are not from a traditional CS&#x2F;Engineering background. And we should be trying to bring these folks into the ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;Acceptance of Rust as another language worth knowing by “average devs” would be helped with more beginners writing or talking about it. It’s my observation that a lot of developers who are self-taught or from bootcamps are mostly in the Javascript&#x2F;Python&#x2F;Ruby space for mostly Web facing code. But Rust can be a perfect second language to learn about types and memory management.&lt;&#x2F;p&gt;
&lt;p&gt;I believe content from this crowd would be my favorites to read since I think they’ll give valid opinions to someone who has been using Rust for years (like me) now overlook or accept without second thoughts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;increase-of-copy-paste-templates-to-help-bootstrap-common-types-of-projects&quot;&gt;Increase of copy&#x2F;paste templates to help bootstrap common types of projects&lt;a class=&quot;zola-anchor&quot; href=&quot;#increase-of-copy-paste-templates-to-help-bootstrap-common-types-of-projects&quot; aria-label=&quot;Anchor link for: increase-of-copy-paste-templates-to-help-bootstrap-common-types-of-projects&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I have just become aware of &lt;code&gt;cargo generate&lt;&#x2F;code&gt; because of some of the niche project spaces I’m working on: WebAssembly and embedded.&lt;&#x2F;p&gt;
&lt;p&gt;Today, I keep &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&quot;&gt;my own repo&lt;&#x2F;a&gt; where I offer rough working examples using common servers or patterns.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;my-technical-wishlist&quot;&gt;My technical wishlist&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-technical-wishlist&quot; aria-label=&quot;Anchor link for: my-technical-wishlist&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Rust analyzer support for generated code
&lt;ul&gt;
&lt;li&gt;I want support for &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;tonic&quot;&gt;Tonic&lt;&#x2F;a&gt;’s generated code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Better tools or patterns for debugging Async&#x2F;Await
&lt;ul&gt;
&lt;li&gt;The debugger just makes me realize how little I understand about Futures.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Native Rust for building games
&lt;ul&gt;
&lt;li&gt;The end goal being Rust on consoles or in AAA games. I know they are sometimes used through FFI. It’s not a light task to use Rust in this manner.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Native Rust for building mobile apps
&lt;ul&gt;
&lt;li&gt;We can technically write apps for both Android and iOS today, but they aren’t exactly popular because building is complicated&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;where-i-plan-to-be-with-rust-in-2021&quot;&gt;Where I plan to be with Rust in 2021&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-i-plan-to-be-with-rust-in-2021&quot; aria-label=&quot;Anchor link for: where-i-plan-to-be-with-rust-in-2021&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;i-plan-to-write-more-rust-that-other-people-find-useful&quot;&gt;I plan to write more Rust that other people find useful.&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-plan-to-write-more-rust-that-other-people-find-useful&quot; aria-label=&quot;Anchor link for: i-plan-to-write-more-rust-that-other-people-find-useful&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I hope to have &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;orbitalci&#x2F;orbital&quot;&gt;OrbitalCI&lt;&#x2F;a&gt; into more of a Beta quality, and usable by others for feedback&lt;&#x2F;li&gt;
&lt;li&gt;Publish more crates that allow people to write Rust to interact with existing APIs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;i-plan-to-have-serious-projects&quot;&gt;I plan to have serious projects&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-plan-to-have-serious-projects&quot; aria-label=&quot;Anchor link for: i-plan-to-have-serious-projects&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A few serious projects in upcoming Rust niches so that I can produce more educational content (and hopefully even a product that others may use!)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Embedded&lt;&#x2F;li&gt;
&lt;li&gt;WebAssembly&lt;&#x2F;li&gt;
&lt;li&gt;Mobile&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;i-plan-to-start-making-money-with-rust&quot;&gt;I plan to start making money with Rust.&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-plan-to-start-making-money-with-rust&quot; aria-label=&quot;Anchor link for: i-plan-to-start-making-money-with-rust&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I’ve started my own business in 2020, and I’m not yet making any money. However, I’ve decided to base a lot of my work using Rust. I am enjoying the experience so far. I intend to sharpen my skills throughout 2021 into paid work.&lt;&#x2F;li&gt;
&lt;li&gt;I hope to make some income through Twitch from livestreaming my coding and other platforms from my writing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;how-do-i-intend-to-help-the-rust-project&quot;&gt;How do I intend to help the Rust project?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-do-i-intend-to-help-the-rust-project&quot; aria-label=&quot;Anchor link for: how-do-i-intend-to-help-the-rust-project&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I’m using Rust to build software for my business (in the DevOps tooling space).&lt;&#x2F;li&gt;
&lt;li&gt;I will be producing more blog posts, with an angle of inviting Python and Javascript programmers to Rust&lt;&#x2F;li&gt;
&lt;li&gt;I plan on making my first code or docs contribution to the Rust project in 2021.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I see a lot of promise in Rust&#x27;s future in 2021. Much has become stable in 2020 and all that is needed is some time and encouragement.&lt;&#x2F;p&gt;
&lt;p&gt;I have enough confidence that I plan on using Rust as my main language as well as motivation to get more involved with the community.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My Hacktoberfest 2020 is Complete</title>
		<published>2020-10-19T00:00:00+00:00</published>
		<updated>2020-10-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/my-hacktoberfest-2020-is-complete/" type="text/html"/>
		<id>https://tjtelan.com/blog/my-hacktoberfest-2020-is-complete/</id>
		<content type="html"> 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Hacktoberfest 2020 complete - banner&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This is a followup post to my &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;first-time-hacktoberfest-2020&#x2F;&quot;&gt;previous Hacktoberfest related post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR - Officially I’ve completed Hacktoberfest 2020!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The beginning of the month was a bit rough, and while there were good intentions, the level of communication to participants was not up to par. But eventually the news of the changes rolled out in a much more official way! For what it’s worth, I approve.&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Header with update announcing event being opt-in&quot; &#x2F;&gt;&lt;figcaption&gt;Better late than never&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The change to make eligible repos opt-in will hopefully provide less of an unexpected disruption to open source maintainers. I imagine the spike in activity will belong to repos who want the commits. Also I hope the intended effect will cut down on greedy devs gaming the rules with low quality contributions to get free stuff.&lt;&#x2F;p&gt;
&lt;p&gt;The extended review time was still 2 weeks, but a couple days later after &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;first-time-hacktoberfest-2020&#x2F;&quot;&gt;my post&lt;&#x2F;a&gt;, I got an email acknowledging my 4 PRs. I’ve just been waiting for the clock to run out this entire time.&lt;&#x2F;p&gt;
&lt;p&gt;However, the time is here. Officially I’ve completed Hacktoberfest 2020!&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Congrats message in my profile&quot; &#x2F;&gt;&lt;figcaption&gt;Congrats message in my profile&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;my-strategy&quot;&gt;My strategy&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-strategy&quot; aria-label=&quot;Anchor link for: my-strategy&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you have never contributed to open source before, I can share what I usually do. I took a simple approach.&lt;&#x2F;p&gt;
&lt;p&gt;I crawled the Github search for &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;search?l=&amp;amp;p=1&amp;amp;q=label%3Ahacktoberfest+state%3Aopen+no%3Aassignee+is%3Aissue+language%3ARust&amp;amp;ref=advsearch&amp;amp;type=Issues&quot;&gt;Hacktoberfest labeled repos that were written in Rust&lt;&#x2F;a&gt; because I was only interested in writing in that language.&lt;&#x2F;p&gt;
&lt;p&gt;There were quite a lot, so I picked a handful of the smallest Rust projects where the repo owner asked for some &lt;strong&gt;very specific&lt;&#x2F;strong&gt; contributions that were clear enough that it didn’t require me to ask questions before getting started. All things considered, it only took me a total of 2-3 hours to write code.&lt;&#x2F;p&gt;
&lt;p&gt;I did a bit of overcommunication with the repo maintainer to be friendly, but also to give the impression that changes can still be made with their feedback. I wanted to offer an opportunity for them to give me feedback so they would be happy with what they would get merged in.&lt;&#x2F;p&gt;
&lt;p&gt;If you didn’t know, you can &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;free-pro-team@latest&#x2F;github&#x2F;managing-your-work-on-github&#x2F;linking-a-pull-request-to-an-issue&quot;&gt;reference issues from your commit message&lt;&#x2F;a&gt;, which I did. Additionally I linked the PR to the issue, and I left a message in the issue itself describing my thought process.  There were small changes requested by the maintainers, though every PR was eventually accepted and merged.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-prize&quot;&gt;The Prize&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-prize&quot; aria-label=&quot;Anchor link for: the-prize&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Hacktoberfest Forest 2020 logo&quot; &#x2F;&gt;&lt;figcaption&gt;Am I a digital lorax? Because I wrote code for the trees&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;So I’ve decided to plant a tree instead of receiving a shirt. It was nice that there was an alternative.&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Order form for claiming plant a tree prize&quot; &#x2F;&gt;&lt;figcaption&gt;There was only one color and one size. Fun!&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I don’t know what’s next. After completing the form I was told to await instructions from Digital Ocean for how to continue the process of planting the tree.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, this is the end of the line. Hacktoberfest 2020 is done for me. I feel happy to have made a positive impact.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to Digital Ocean, Intel, Dev.to and the Hacktoberfest team for making this year happen!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In the future I will likely crawl the Github search for small Rust projects to contribute to live on &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;tjtelan&quot;&gt;my Twitch stream&lt;&#x2F;a&gt;. If that interests you, or if you’d like me to contribute to your repo, then I’d appreciate it if you’d &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;tjtelan&quot;&gt;give me a follow&lt;&#x2F;a&gt;! &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What can I do to feel like I belong in the Tech community?</title>
		<published>2020-10-13T00:00:00+00:00</published>
		<updated>2020-10-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/belonging-in-the-tech-community/" type="text/html"/>
		<id>https://tjtelan.com/blog/belonging-in-the-tech-community/</id>
		<content type="html">&lt;p&gt;When I was a teenager, in the 00’s, the internet gave me net-positive energy and optimism. It was still very novel, and there was a lot of opportunity to discover niche communities that overlapped with my interests. I felt like part of an in-crowd and it deeply influenced my life.&lt;&#x2F;p&gt;
&lt;p&gt;I have continuously been connected online (Metaphorically. Bc I grew up with dial-up). Much of the novelty has long worn off.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-s-been-an-exhausting-year&quot;&gt;It’s been an exhausting year&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-s-been-an-exhausting-year&quot; aria-label=&quot;Anchor link for: it-s-been-an-exhausting-year&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I was laid off early in the year due to the pandemic. Due to the sudden loss of human interaction, I have been revisiting some of that yearning for connection as I transition to starting a business from scratch (more about that some other time). As a necessity, I am dependent on the internet for the majority of my human interaction. Maybe this is me being mentally old, but I feel the current energy of my echochamber to be more net-negative and I’m hoping I can introduce myself to people who build others up. &lt;&#x2F;p&gt;
&lt;p&gt;Niche communities are difficult for me to discover with the same ease as when I was young. That’s not a reason enough for me to stop looking! So that’s fine. I’ll start looking where I’m at. For professional reasons, I &lt;em&gt;need&lt;&#x2F;em&gt; to start in Tech. So I’ll need to be more specific, because Tech is HUGE.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;searching-for-my-k-nearest-neighbors&quot;&gt;Searching for my k-nearest neighbors&lt;a class=&quot;zola-anchor&quot; href=&quot;#searching-for-my-k-nearest-neighbors&quot; aria-label=&quot;Anchor link for: searching-for-my-k-nearest-neighbors&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll spare you the rest of the thought exercise. I’ve been focusing my efforts within the Rust community. Why? It’s reignited my joy in writing code again, and I’m trying to start my business with it. &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;insights.stackoverflow.com&#x2F;survey&#x2F;2020#technology-most-loved-dreaded-and-wanted-languages-loved&quot;&gt;And because people love it!&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;p&gt;With a few years under my belt, I’ve finally reached a point in my Rust development that I no longer consider myself a beginner and I can be productive. Great! Well, now what?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-have-i-been-doing&quot;&gt;What have I been doing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-have-i-been-doing&quot; aria-label=&quot;Anchor link for: what-have-i-been-doing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Regularly posting blog posts with a purpose of educating or sharing an experience as a non-expert&lt;&#x2F;li&gt;
&lt;li&gt;Hanging out around Tech Twitter and occasionally commenting and retweeting&lt;&#x2F;li&gt;
&lt;li&gt;Streaming writing Rust code for a few hours at least once a week&lt;&#x2F;li&gt;
&lt;li&gt;Joining so many Slack&#x2F;Discord&#x2F;Matrix&#x2F;Gitter&#x2F;IRC communities. Mostly lurking, but participating occasionally&lt;&#x2F;li&gt;
&lt;li&gt;Maintaining a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;git-url-parse&quot;&gt;Rust crate&lt;&#x2F;a&gt; and occasionally asking related projects if they would like to depend on it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-have-i-been-expecting&quot;&gt;What have I been expecting?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-have-i-been-expecting&quot; aria-label=&quot;Anchor link for: what-have-i-been-expecting&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Part of me was hoping eventually after seeing the same same faces, same names… that I would feel like I had joined the community and I’d stop feeling so intimidated. Perhaps that I would have experienced some subtle mutual acknowledgement of acquaintance? (I have since been lowering my expectations, fwiw. I now believe it is my responsibility to initiate the interactions with potential personal meaning or expectation.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-have-i-not-been-doing&quot;&gt;What have I not been doing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-have-i-not-been-doing&quot; aria-label=&quot;Anchor link for: what-have-i-not-been-doing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Actively inviting conversation&lt;&#x2F;li&gt;
&lt;li&gt;Stepping out of my comfort zone to ask for feedback&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;won-t-you-be-my-neighbor&quot;&gt;Won’t you be my neighbor?&lt;a class=&quot;zola-anchor&quot; href=&quot;#won-t-you-be-my-neighbor&quot; aria-label=&quot;Anchor link for: won-t-you-be-my-neighbor&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When was the last time you joined a new community? What was the defining moment when you felt like you belonged?&lt;&#x2F;p&gt;
&lt;p&gt;I don’t feel unwelcome in Tech, but I feel invisible. My attempts to extend my reach out to those who might actually care to connect has random-like results. Not for lack of trying. But admittedly, I am placing too much value in establishing consistency before figuring out what works for me.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know what options to try next. I’m not fishing for pity, but I am looking for advice. How do I find my audience? How can my audience find me?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Join the discussion on my post at &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;tjtelan&#x2F;what-can-i-do-to-feel-like-i-belong-in-the-tech-community-1k7k&quot;&gt;Dev.to&lt;&#x2F;a&gt; or on &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ThatTJTelan&#x2F;status&#x2F;1316132042476670976&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A first-timer&#x27;s perspective to Digital Ocean&#x27;s Hacktoberfest 2020</title>
		<published>2020-10-05T00:00:00+00:00</published>
		<updated>2020-10-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/first-time-hacktoberfest-2020/" type="text/html"/>
		<id>https://tjtelan.com/blog/first-time-hacktoberfest-2020/</id>
		<content type="html">&lt;h2 id=&quot;so-what-is-hacktoberfest&quot;&gt;So... what is Hacktoberfest?&lt;a class=&quot;zola-anchor&quot; href=&quot;#so-what-is-hacktoberfest&quot; aria-label=&quot;Anchor link for: so-what-is-hacktoberfest&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Digital Ocean’s &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hacktoberfest.digitalocean.com&#x2F;&quot;&gt;Hacktoberfest&lt;&#x2F;a&gt; is a month-long event over the month of October aimed at generating an increase of contributions to open source projects. Participants are asked to open PRs against public repositories in Github with “positive contributions”. Swag is offered to the first 70k participants to open 4 qualified PRs.&lt;&#x2F;p&gt;
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.giphy.com&amp;#x2F;media&amp;#x2F;l3vRmVv5P01I5NDAA&amp;#x2F;giphy.gif&quot; alt=&quot;Ed from Cowboy Bebop&quot;&#x2F;&gt;&lt;figcaption&gt;A typical hacker&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;and-how-is-it-going&quot;&gt;And… how is it going?&lt;a class=&quot;zola-anchor&quot; href=&quot;#and-how-is-it-going&quot; aria-label=&quot;Anchor link for: and-how-is-it-going&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have mixed opinions that honestly, skew negatively. But I feel like I’m more charitable about my feedback than what I&#x27;ve seen on the internet. I’m not intending to drag Hacktoberfest but I’d like to see improvement.&lt;&#x2F;p&gt;
&lt;p&gt;2020 is my first year participating in Hacktoberfest. I’ve already been contributing more to the open source community over the last few years. Particularly for the Rust programming language. I set out to use this event as an excuse to help the Rust community out.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;positives&quot;&gt;Positives:&lt;a class=&quot;zola-anchor&quot; href=&quot;#positives&quot; aria-label=&quot;Anchor link for: positives&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;the-feeling-of-a-community-effort-to-contribute-to-open-source&quot;&gt;The feeling of a community effort to contribute to Open Source&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-feeling-of-a-community-effort-to-contribute-to-open-source&quot; aria-label=&quot;Anchor link for: the-feeling-of-a-community-effort-to-contribute-to-open-source&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;i.makeagif.com&amp;#x2F;media&amp;#x2F;10-05-2020&amp;#x2F;FTPRH-.gif&quot; alt=&quot;From Tom Goes to the Mayor into. Shaking hands. Community Spirit&quot;&#x2F;&gt;&lt;figcaption&gt;A typical open source PR&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Contributions to open source can happen at any time. I think it’s a nice idea to have a time where people who use open source software are encouraged to contribute meaningfully. Especially for anyone who may feel a bit of intimidation to do so. I’m sure a T-shirt and some stickers can feel very validating to someone who was just using open source before, and now they have some evidence that they contributed too.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;discovering-smaller-projects&quot;&gt;Discovering smaller projects&lt;a class=&quot;zola-anchor&quot; href=&quot;#discovering-smaller-projects&quot; aria-label=&quot;Anchor link for: discovering-smaller-projects&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.giphy.com&amp;#x2F;media&amp;#x2F;1FXYMTuKX91hS&amp;#x2F;giphy.gif&quot; alt=&quot;Bob Ross. Beauty is everywhere&quot;&#x2F;&gt;&lt;figcaption&gt;Bob Ross had amazing commit messages&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This was a great opportunity to explore Github for projects that don’t require a lot of experience or commitment in order to help a maintainer out. The repos I offered code to were all small Rust projects that were doing some practical things. It was fun, and I put some effort into what I wrote in addition to having good interactions with the maintainers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;negatives&quot;&gt;Negatives:&lt;a class=&quot;zola-anchor&quot; href=&quot;#negatives&quot; aria-label=&quot;Anchor link for: negatives&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;this-year-s-hot-fix-to-the-rules-and-the-lack-of-follow-up-communication&quot;&gt;This year’s Hot-fix to the rules and the lack of follow-up communication&lt;a class=&quot;zola-anchor&quot; href=&quot;#this-year-s-hot-fix-to-the-rules-and-the-lack-of-follow-up-communication&quot; aria-label=&quot;Anchor link for: this-year-s-hot-fix-to-the-rules-and-the-lack-of-follow-up-communication&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.giphy.com&amp;#x2F;media&amp;#x2F;jV4wbvtJxdjnMriYmY&amp;#x2F;giphy.gif&quot; alt=&quot;Spongebob. Communication rainbow&quot;&#x2F;&gt;&lt;figcaption&gt;Talk to your community&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I feel like the communication around the event is not being managed well. Very reactive, and not effective at spreading the word.&lt;&#x2F;p&gt;
&lt;p&gt;A few days after the start of the event, there was a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;digitalocean&#x2F;hacktoberfest&#x2F;pull&#x2F;596&quot;&gt;significant change in the rules&lt;&#x2F;a&gt;. I only happened to learn about it through the grapevine, as opposed to from Digital Ocean or through the Hacktoberfest front page or profile pages. Rules feel like they are inconsistently applied, and it feels unwelcoming.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Where this change affected me is their change of minimum review times, and probably the validity of my contributions. But I’m confused about what is supposed to apply to me since I had created all my PRs in the first 3 days.&lt;&#x2F;p&gt;
&lt;p&gt;What makes this more confusing is the conflicting information within the Hacktoberfest FAQ.&lt;&#x2F;p&gt;
&lt;p&gt;For example, this is likely some old information about the review time of PRs. States 7 days.&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;From FAQ. Review time of 7 days&quot; &#x2F;&gt;&lt;figcaption&gt;From FAQ. Review time of 7 days&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Later in the same FAQ it says it’s been updated to 14 days. But only those &lt;strong&gt;before October 3, 2020 @ 12:00 UTC&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Also from FAQ. Review time of 14 days&quot; &#x2F;&gt;&lt;figcaption&gt;Also from FAQ. Review time of 14 days&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;All 4 PRs were made before this rule change was stated to go into effect (Oct 3 @ 12:00 UTC). The latest being Oct 3 @ 6:26 UTC.&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;4 PRs. All earlier than Oct 3 @ 12:00 UTC&quot; &#x2F;&gt;&lt;figcaption&gt;4 PRs. All earlier than Oct 3 @ 12:00 UTC&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Changes to the rules could have been communicated somewhere on the profile page in the legend, but were not. Or through email, like the message I received when I made my first PR.&lt;&#x2F;p&gt;
&lt;p&gt;I just noticed all my maturation times jump from about a week to about 2 weeks. 3 of these were PRs that were already merged too.&lt;&#x2F;p&gt;
&lt;p&gt;And I’m more annoyed and slightly unmotivated to continue in the event.&lt;&#x2F;p&gt;
&lt;p&gt;(But tbh, rather than feel angry, I’m psyched that I got a few PRs merged so quickly!)&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Missed opportunity to communicate that this duration has been updated from 7 to 14 days.&quot; &#x2F;&gt;&lt;figcaption&gt;Missed opportunity to communicate that this duration has been updated from 7 to 14 days.&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;feeling-like-corporate-sponsored-projects-are-taking-advantage-of-free-labor&quot;&gt;Feeling like corporate-sponsored projects are taking advantage of free labor&lt;a class=&quot;zola-anchor&quot; href=&quot;#feeling-like-corporate-sponsored-projects-are-taking-advantage-of-free-labor&quot; aria-label=&quot;Anchor link for: feeling-like-corporate-sponsored-projects-are-taking-advantage-of-free-labor&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I think that the core intention of Hacktoberfest is well meaning. But I&#x27;m seeing some non-trivial work in big projects labeled for Hacktoberfest.&lt;&#x2F;p&gt;
&lt;p&gt;I’m not personally driven by the swag of a free T-shirt. I just want to help the Rust community and level up my skills while I&#x27;m at it. But I feel weird sitting near loud, &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.domenic.me&#x2F;hacktoberfest&#x2F;&quot;&gt;negative opinions&lt;&#x2F;a&gt; that I partially agree with. (Although my feelings are a lot more charitable and less intense)&lt;&#x2F;p&gt;
&lt;p&gt;Before &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;digitalocean&#x2F;hacktoberfest&#x2F;pull&#x2F;596&quot;&gt;the silent rule changes&lt;&#x2F;a&gt;, the premise of projects that must opt-out really placed a huge burden on the maintainers of small projects.&lt;&#x2F;p&gt;
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.giphy.com&amp;#x2F;media&amp;#x2F;48Osj6XyU0ptQRfh5V&amp;#x2F;giphy.gif&quot; alt=&quot;A typical maintainer during Hacktoberfest&quot;&#x2F;&gt;&lt;figcaption&gt;A typical maintainer during Hacktoberfest&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;But I’m mostly in my raw feelings, because I feel like the focused energy of the open source community is being taken advantage of by bigger corporate entities for a T-shirt. They are all on the bandwagon to use free energy from eager and inexperienced developers to contribute to their big name-brand projects even though they have their own funding for development.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-will-i-participate-next-year&quot;&gt;But... will I participate next year?&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-will-i-participate-next-year&quot; aria-label=&quot;Anchor link for: but-will-i-participate-next-year&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.giphy.com&amp;#x2F;media&amp;#x2F;4TtrENnFsz4EWkU6gz&amp;#x2F;giphy.gif&quot;&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Hard to say at this moment, but what incentive do I have? I can contribute any time to small projects, and I most likely will. I have to thank Digital Ocean for helping me realize that.&lt;&#x2F;p&gt;
&lt;p&gt;The spirit to drive help to small projects is one of my favorite parts of open source, and I think that Hacktoberfest probably started out with that ethos before their audience made it about T-shirts and stickers.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t like the gamified feeling, and maybe that makes this event not for me. The new rule changes will very much change the feel of participation. Probably for the better, since it is opt-in.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As I continue to dig into the changes, it appears that there was a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hacktoberfest&#x2F;status&#x2F;1312221208667185153&quot;&gt;tweet&lt;&#x2F;a&gt; made prior to the changes, but from my perspective, if you didn’t use Twitter and follow &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hacktoberfest&quot;&gt;@hacktoberfest&lt;&#x2F;a&gt;, you’d continue to be lost to the change.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hacktoberfest.digitalocean.com&#x2F;hacktoberfest-update&quot;&gt;This message&lt;&#x2F;a&gt; appears on their site, but I only got to it through the PR. I don&#x27;t know how else I would have found it because it isn&#x27;t on the front page or anywhere I&#x27;d easily find.&lt;&#x2F;p&gt;
&lt;p&gt;On one account, I&#x27;ve been told that an email was sent out to highlight rule changes. Pretty late after the fact, but I guess better than never. I cannot confirm this myself, since at the time of this writing, I haven&#x27;t received any email regarding rule changes.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Depending on how the changes affect the mood and the outcome of this year&#x27;s event, I could probably warm up to the idea of 2021. Either way, I&#x27;ll still be opening PRs against something.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll give credit where it is due to the Hacktoberfest team for responding to abusive participants. BUT I don’t appreciate rules being changed without care to communicate them effectively. I expect better communication from a worldwide event. Please learn from this!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Anyway, if you&#x27;ve made it this far, don&#x27;t wait for October to contribute to open source! &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Reflections after 2 months of live coding</title>
		<published>2020-09-22T00:00:00+00:00</published>
		<updated>2020-09-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/reflections-after-2-months-of-live-coding/" type="text/html"/>
		<id>https://tjtelan.com/blog/reflections-after-2-months-of-live-coding/</id>
		<content type="html">&lt;p&gt;I started streaming on Twitch this summer. I have been streaming Rust development once a week.&lt;&#x2F;p&gt;
&lt;p&gt;The opportunity presented itself for reasons related to the current state of travel industries (and the economic consequences that followed). It has been an interesting learning experience. &lt;&#x2F;p&gt;
&lt;p&gt;After experimenting with something, it’s always good to take time to stop and reflect on what has been successful and where there’s room for improvement. The time I’ve spent so far has been challenging and confusing – but also enjoyable. This post is for anyone interested in the experiences of a beginning streamer, or anyone considering dipping their toes into the Twitch pool.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll organize my reflections into 3 sections:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Things completely in my control&lt;&#x2F;li&gt;
&lt;li&gt;Short-term objectives that I can influence&lt;&#x2F;li&gt;
&lt;li&gt;Long-term aspirations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;If you’re interested how I got started, &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;what-i-learned-running-a-live-programming-stream-from-linux&#x2F;&quot;&gt;I wrote a post about it that you can check out!&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;things-completely-in-my-control&quot;&gt;Things completely in my control&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-completely-in-my-control&quot; aria-label=&quot;Anchor link for: things-completely-in-my-control&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Like most things in life, there’s not much completely within my control. But I can tinker with my channel&#x27;s look and feel, the time and duration I stream, and what I work on during each stream.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;content&quot;&gt;Content&lt;a class=&quot;zola-anchor&quot; href=&quot;#content&quot; aria-label=&quot;Anchor link for: content&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Working on a project provides natural boundaries.&lt;&#x2F;strong&gt; Before beginning a stream, I don’t need to know 100% what I’m going to accomplish or how. But I’m more mentally present if I am not thinking too much about what I need to do next. To help with that, I like to plan a predetermined, single direction per stream. I choose a reasonably-sized goal to work on for each stream, and try to roughly break down the steps so I have a small map to follow during the stream.&lt;&#x2F;p&gt;
&lt;p&gt;I also expose project management over stream (via Github projects), which keeps me focused on individual tasks and keeps my stream content on track.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Learn from my mistake.&lt;&#x2F;strong&gt; If you cross-stream to YouTube, be mindful of Content ID. I experimented with background music and naively loaded up another YouTube steam for a short moment. Don’t do this! Pretty quickly it was automatically flagged. Look for royalty-free music instead.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;viewer-experience&quot;&gt;Viewer experience&lt;a class=&quot;zola-anchor&quot; href=&quot;#viewer-experience&quot; aria-label=&quot;Anchor link for: viewer-experience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As I’ve continued on, I&#x27;ve put more effort into improving the experience of viewing my stream These are my key takeaways:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Know your limits.&lt;&#x2F;strong&gt; I’ve learned that 3 hours is about my maximum session length. Any longer and I start to feel low energy and my voice gets tired from all the talking. Not to mention, my current viewership and audience engagement doesn&#x27;t justify being online for that long.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Show your process&lt;&#x2F;strong&gt;. There are two steps (where I’m not actively coding) that I include on my stream as part of my process: diagrams and project management. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Writing code is a lot of effort, especially if you don’t know where you’re going. For me, drawing out diagrams of structures or algorithms is like writing an outline before I start coding. I’ve been learning Figma to make nice diagrams for streams.&lt;&#x2F;li&gt;
&lt;li&gt;If I’m practicing project management, I’ll do it live. Lately, I’ve been using Github projects to manage my roadmap and planning.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is an opportunity to show real parts of my process, and there’s no reason to hide that from viewers. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If you don’t know, now you know.&lt;&#x2F;strong&gt; If I don’t know something, I&#x27;ll open a browser and look up documentation and examples or ask my viewers. It won’t benefit anyone if I’m just struggling. Plus, sometimes the audience can help out . Looking for answers is also a very normal part of coding – no one knows everything, and searching for things effectively is a skill in and of itself.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Talk it out.&lt;&#x2F;strong&gt; It takes some practice, but speaking out my thought process has definitely  from when I first started. I realized as I was watching other live-coding streamers for research that it’s not exactly interesting to watch in silence as someone types. People usually will help if they know what you&#x27;re trying to figure out, or ask questions to feel involved.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Don’t stress.&lt;&#x2F;strong&gt; I also found it helpful to turn off the viewers count if you have the stream manager open. It serves no real time purpose and causes unnecessary mental stress if you&#x27;re alone in your stream. Always talk like someone is watching.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Back in five.&lt;&#x2F;strong&gt; Have OBS scenes to switch to for bathroom breaks or intentional moments away from the keyboard.  I think this is just polite as a non-gamer stream. It’s a bit of a bummer to open up a stream to an empty chair and no indication of when the person will be coming back.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;short-term-objectives-i-can-influence&quot;&gt;Short-term objectives I can influence&lt;a class=&quot;zola-anchor&quot; href=&quot;#short-term-objectives-i-can-influence&quot; aria-label=&quot;Anchor link for: short-term-objectives-i-can-influence&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have set a few new long-term goals for myself. But I&#x27;ll always need to deal with the same obstacles to broadcasting effectively, and get viewers to agree to hang out and talk to me.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asking-myself-questions-first&quot;&gt;Asking myself questions first&lt;a class=&quot;zola-anchor&quot; href=&quot;#asking-myself-questions-first&quot; aria-label=&quot;Anchor link for: asking-myself-questions-first&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Practice makes perfect.&lt;&#x2F;strong&gt; If you are going to be exploring a new library on your stream, then practice using it for a non-trivial amount of time prior to broadcast. This will serve the purpose of defining a direction for the stream, in addition to building familiarity of where some of the pitfalls are in case of roadblocks. Having some familiarity with the tools or systems I’m working with also makes me feel more confident in demonstrating it, even when I don’t know how to do everything I plan on doing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;human&amp;gt; has entered the chat.&lt;&#x2F;strong&gt; People who chat will often not talk about the code you&#x27;re writing. This isn&#x27;t a negative! People usually just want to get to know me. Keep in mind, Twitch is not a lecture hall (unless that’s actually what your stream actually is).&lt;&#x2F;p&gt;
&lt;p&gt;Yes, it can feel a little disruptive to your train of thought if you’re only prepared to talk about what you’re working on. But that&#x27;s another reason why to prepare with a plan and practice with any new tools.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reaching-an-audience&quot;&gt;Reaching an audience&lt;a class=&quot;zola-anchor&quot; href=&quot;#reaching-an-audience&quot; aria-label=&quot;Anchor link for: reaching-an-audience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;On Twitch.&lt;&#x2F;strong&gt; Twitch does little to promote for you as a small streamer. So experimenting with self-promotion is a must.&lt;&#x2F;p&gt;
&lt;p&gt;The lack of promotion can be a double-edged sword, compared to YouTube. The requirements for Twitch Affiliate are more modest but still take effort. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;On YouTube.&lt;&#x2F;strong&gt; YouTube technically promotes you through search results, but I still need to experiment with self-promotion. The bar for reaching YouTube Partner is significantly higher. It definitely requires a different strategy to build an audience than Twitch. I am not actively focused on building my audience here... I just use Restream.io to simultaneously go live on YouTube and Twitch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;long-term-aspirations&quot;&gt;Long-term aspirations&lt;a class=&quot;zola-anchor&quot; href=&quot;#long-term-aspirations&quot; aria-label=&quot;Anchor link for: long-term-aspirations&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Truthfully, I don’t have any desire to make a living as a full-time streamer. However, I would like to have diverse sources of income, including anything I can make through streaming and anything I create while streaming. So for that reason alone, it makes it feel more important to take this a little seriously so that I will be able to meet the requirements for Twitch Affiliate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;twitch-specific-channel-improvements&quot;&gt;Twitch-specific channel improvements&lt;a class=&quot;zola-anchor&quot; href=&quot;#twitch-specific-channel-improvements&quot; aria-label=&quot;Anchor link for: twitch-specific-channel-improvements&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If I look at the more successful live-coding streamers, they have been on Twitch for a while, they’ve put some effort in their visual branding, and they are on a Twitch team. I believe that these are all realistically achievable for me if I put in the work. Here are improvements I am actively planning or working on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Visual improvements to my OBS scenes&lt;&#x2F;li&gt;
&lt;li&gt;Making my Twitch profile more interesting&lt;&#x2F;li&gt;
&lt;li&gt;Coming up with project ideas that are interesting and&#x2F;or novel&lt;&#x2F;li&gt;
&lt;li&gt;Determining what time of day to start my stream, so people are more likely to stop by and stick around for a while&lt;&#x2F;li&gt;
&lt;li&gt;Reaching the requirements for Twitch Affiliate&lt;&#x2F;li&gt;
&lt;li&gt;Joining a team: my goal is to join the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;team&#x2F;rustaceans&quot;&gt;Rustaceans&lt;&#x2F;a&gt; Twitch team once I reach Affiliate status.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;a class=&quot;zola-anchor&quot; href=&quot;#networking&quot; aria-label=&quot;Anchor link for: networking&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I stated before that Twitch doesn’t do much to promote small streamers. Promotion seems to be geared toward creators who are already reaching an audience. Networking is a creative skill I get to build that wouldn’t normally present itself in the Software industry in this capacity. It will certainly benefit me outside the context of streaming. Here are a few paths for networking:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Pre-stream promotion.&lt;&#x2F;strong&gt; It can be hard to find the appropriate venue for pre-stream promotion. I’ve personally found that Twitter is not a great place to promote if you don’t have an existing audience. My engagement is very low on my tweets for good reason. But it isn’t the only option I have. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Find an audience by being active in communities.&lt;&#x2F;strong&gt; I wasn’t really watching other live-coding streams on Twitch prior to doing it myself, but I have noticed that I learn a lot by watching other streamers that are about the same size as myself or larger and taking note of what they do “right”. As well as interacting with them and their audience.&lt;&#x2F;p&gt;
&lt;p&gt;One nice surprise was finding that there are a lot of small channel live-coders or Rust language enthusiasts like me who show up in my chat to talk, and I’ve been able to make some connections this way.&lt;&#x2F;p&gt;
&lt;p&gt;I’m also working on being a more active member of the Rust community. I’ve been using this language for a while. I don’t consider myself an expert, but I do feel like the community can benefit from  my voice and experience.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Talk to the people around me.&lt;&#x2F;strong&gt; I hear that Seattle has a pretty active tech scene (For reasons, I need to state that this is a joke).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leveling-up&quot;&gt;Leveling up&lt;a class=&quot;zola-anchor&quot; href=&quot;#leveling-up&quot; aria-label=&quot;Anchor link for: leveling-up&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is a bit of my insecurity presenting itself. But I notice improvements the longer I continue, which encourages me to keep going. I hope to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Improve my skill as someone who can design, plan, and write code. Especially in the domains I spend the most time in: Rust, Python, and Javascript.&lt;&#x2F;li&gt;
&lt;li&gt;Come to terms with my self-consciousness about not being “a good programmer”.&lt;&#x2F;li&gt;
&lt;li&gt;Write more blog posts(I’m near the end of this one. It gets easier the more I do it.)&lt;&#x2F;li&gt;
&lt;li&gt;Producing videos for YouTube as companions to blog posts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;If you’ve made it this far, thanks for reading!&lt;&#x2F;p&gt;
&lt;p&gt;I could not have predicted where I’d be this year. It has not shaped up to be anywhere near what I thought it might be. But I am fortunate that I was able to try something I would have normally not done before.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re interested in how my story continues to procedurally generate, follow me on Twitch.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;tjtelan&quot;&gt;https:&#x2F;&#x2F;www.twitch.tv&#x2F;tjtelan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Let’s build a single binary gRPC server-client with Rust in 2020</title>
		<published>2020-08-19T00:00:00+00:00</published>
		<updated>2020-10-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/lets-build-a-single-binary-grpc-server-client-with-rust-in-2020/" type="text/html"/>
		<id>https://tjtelan.com/blog/lets-build-a-single-binary-grpc-server-client-with-rust-in-2020/</id>
		<content type="html"> 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;The Rust logo plus the gRPC logo&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;There are plenty of resources for the basics of Rust and for protocol buffers + gRPC, so I don’t want to waste your time with heavy introductions. I want to bring you to action as soon as possible.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re here I’ll make a few assumptions about you.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can write code in another language, but you have an interest in Rust&lt;&#x2F;li&gt;
&lt;li&gt;You have basic familiarity with the command line for simple tasks (like listing files with &lt;code&gt;ls&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;You used web service APIs like REST, GraphQL or gRPC in code you’ve written&lt;&#x2F;li&gt;
&lt;li&gt;You’ve &lt;em&gt;skimmed&lt;&#x2F;em&gt; through the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;proto3&quot;&gt;official protocol buffers (v3) docs&lt;&#x2F;a&gt; at least once&lt;&#x2F;li&gt;
&lt;li&gt;You are looking for some example code that you can copy&#x2F;paste and modify&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;goals-for-the-post&quot;&gt;Goals for the post&lt;a class=&quot;zola-anchor&quot; href=&quot;#goals-for-the-post&quot; aria-label=&quot;Anchor link for: goals-for-the-post&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;My goal is to walk through writing a small async Rust CLI application. It will take user input from a client, send it to a remote gRPC server, and return output to the client.&lt;&#x2F;p&gt;
&lt;p&gt;The finished code is available in my &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&quot;&gt;rust-examples repo&lt;&#x2F;a&gt;, as &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;tree&#x2F;master&#x2F;cli-grpc-tonic-blocking&quot;&gt;cli-grpc-tonic-blocking&lt;&#x2F;a&gt;. But I encourage you to follow along, as I will narrate changes while I make them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-are-we-writing&quot;&gt;What are we writing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-we-writing&quot; aria-label=&quot;Anchor link for: what-are-we-writing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In this example, I will be writing a remote command-line server&#x2F;client.&lt;&#x2F;p&gt;
&lt;p&gt;The client will take in a command line command and send it to the server who will execute the command and send back the contents of standard out.&lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;Block diagram with our actors User, Client and Server. Data flows from user to client, then server before looping back.&quot; &#x2F;&gt;&lt;figcaption&gt;Diagram of the interaction we&amp;#x27;ll be working with&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;For simplicity sake, this example will wait for the execution to complete on the server side before returning output. In a future post I will demonstrate how to stream output back to a client.&lt;&#x2F;p&gt;
&lt;p&gt;I will show you how to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Parse command line user input&lt;&#x2F;li&gt;
&lt;li&gt;Write protocol buffer message types and service interfaces&lt;&#x2F;li&gt;
&lt;li&gt;Compile protocol buffers into Rust code&lt;&#x2F;li&gt;
&lt;li&gt;Implement a gRPC client&lt;&#x2F;li&gt;
&lt;li&gt;Implement a gRPC server (non-streaming)&lt;&#x2F;li&gt;
&lt;li&gt;Use basic async&#x2F;await patterns&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;bigger-picture-goals&quot;&gt;Bigger picture goals&lt;a class=&quot;zola-anchor&quot; href=&quot;#bigger-picture-goals&quot; aria-label=&quot;Anchor link for: bigger-picture-goals&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This is not just a simple Hello World.&lt;&#x2F;p&gt;
&lt;p&gt;I want to provide an example with a realistic application as a foundation. It has potential to be used for something useful, but keep in mind, this example is just a basic script runner and is not secure. &lt;&#x2F;p&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;&lt;figure&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;A more complex diagram to illustrate how the user, client, server interaction scales. One user, one client, many servers.&quot; &#x2F;&gt;&lt;figcaption&gt;This configuration is possible but out of scope&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;One could run multiple instances of this server on multiple hosts and use the client to run shell commands on each of them similar to continuous integration tools like jenkins, puppet, or ansible. (Hot take: CI is just fancy shell scripting anyway)&lt;&#x2F;p&gt;
&lt;p&gt;I do not recommend running this code as-is in any important environment. For demonstrative and educational purposes only!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-the-command-line-interface&quot;&gt;Writing the command line interface&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-the-command-line-interface&quot; aria-label=&quot;Anchor link for: writing-the-command-line-interface&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;[object]&quot; alt=&quot;The Bourne again shell (BASH) logo&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The command line interface is the foundation that will allow us to package our gRPC server and client into the same binary. We’re going to start our new crate with the CLI first.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo new cli-grpc-tonic-blocking
&lt;&#x2F;span&gt;&lt;span&gt;    Created binary (application) `cli-grpc-tonic-blocking` package
&lt;&#x2F;span&gt;&lt;span&gt;$ cd cli-grpc-tonic-blocking
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will use a crate called &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt;. StructOpt utilizes the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;Clap&lt;&#x2F;a&gt; crate which is a powerful command line parser. But Clap can be a little complicated to use, so StructOpt additionally provides a lot of convenient functionality Rust a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;attributes&#x2F;derive.html&quot;&gt;#[derive] attribute&lt;&#x2F;a&gt; so we don’t have to write as much code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;cargo.toml&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;cli-grpc-tonic-blocking&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;T.J. Telan &amp;lt;t.telan@gmail.com&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;2018
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# CLI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;structopt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.3&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to bundle our client and server together, we will want to use our CLI to switch between running as a client or running as a server.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;some-ui-design-for-the-cli&quot;&gt;Some UI design for the CLI&lt;a class=&quot;zola-anchor&quot; href=&quot;#some-ui-design-for-the-cli&quot; aria-label=&quot;Anchor link for: some-ui-design-for-the-cli&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Note: While we are in development you can use &lt;code&gt;cargo run --&lt;&#x2F;code&gt; to run our cli binary, and any arguments after the &lt;code&gt;--&lt;&#x2F;code&gt; is passed as arguments to our binary&lt;&#x2F;p&gt;
&lt;h4 id=&quot;starting-the-server&quot;&gt;Starting the server&lt;a class=&quot;zola-anchor&quot; href=&quot;#starting-the-server&quot; aria-label=&quot;Anchor link for: starting-the-server&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;When we start our server, we want to pass in the subcommand &lt;code&gt;server&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;optional-arguments-for-the-server&quot;&gt;Optional arguments for the server&lt;a class=&quot;zola-anchor&quot; href=&quot;#optional-arguments-for-the-server&quot; aria-label=&quot;Anchor link for: optional-arguments-for-the-server&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;Most of the time our server will listen to a default address and port, but we want to give the user the option to pick something different.&lt;&#x2F;p&gt;
&lt;p&gt;We will provide the option for the server listening address in a flag &lt;code&gt;--server-addr-listen&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;using-the-client&quot;&gt;Using the client&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-the-client&quot; aria-label=&quot;Anchor link for: using-the-client&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;When the user runs a command from our client, we want to use the subcommand &lt;code&gt;run&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;required-positional-arguments-for-the-client&quot;&gt;Required positional arguments for the client&lt;a class=&quot;zola-anchor&quot; href=&quot;#required-positional-arguments-for-the-client&quot; aria-label=&quot;Anchor link for: required-positional-arguments-for-the-client&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;Anything after the &lt;code&gt;subcommand run&lt;&#x2F;code&gt; will be the command we pass to the server to execute. A command has an executable name and optionally also arguments.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt; -- &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;executable&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or to illustrate with how one would use this command w&#x2F;o cargo if it were named &lt;code&gt;remotecli&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ remotecli run &amp;lt;executable&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;optional-arguments-for-the-client&quot;&gt;Optional arguments for the client&lt;a class=&quot;zola-anchor&quot; href=&quot;#optional-arguments-for-the-client&quot; aria-label=&quot;Anchor link for: optional-arguments-for-the-client&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;Just like how our server will have a default listening address and port, our client will assume to connect to the default address. We just want to offer the user the option to connect to a different server.&lt;&#x2F;p&gt;
&lt;p&gt;We will provide the option for the server address in a flag &lt;code&gt;--server-addr&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-cli-code-so-far&quot;&gt;The CLI code so far&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-cli-code-so-far&quot; aria-label=&quot;Anchor link for: the-cli-code-so-far&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’m going to break down the current &lt;code&gt;main.rs&lt;&#x2F;code&gt; into their structs, enums and functions to describe how StructOpt is utilized.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Skip down to the next section &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;lets-build-a-single-binary-grpc-server-client-with-rust-in-2020&#x2F;#all-together&quot;&gt;All together&lt;&#x2F;a&gt; if you want to review this file in a single code block.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;in-parts&quot;&gt;In parts&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-parts&quot; aria-label=&quot;Anchor link for: in-parts&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;applicationarguments&quot;&gt;ApplicationArguments&lt;a class=&quot;zola-anchor&quot; href=&quot;#applicationarguments&quot; aria-label=&quot;Anchor link for: applicationarguments&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; This is the main arguments structure that we&amp;#39;ll parse from
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(StructOpt, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ApplicationArguments {
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(flatten)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;subcommand: SubCommand,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Like the comment says, this will be the main struct that you work with to parse args from the user input. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We use &lt;code&gt;derive(StructOpt)&lt;&#x2F;code&gt; on this struct to let the compiler know to generate the command line parser.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;structopt(name)&lt;&#x2F;code&gt; attribute is reflected in the generated CLI help. Rust will use this name instead of the name of the crate, which again is &lt;code&gt;cli-grpc-tonic-blocking&lt;&#x2F;code&gt;. It is purely cosmetic.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;structopt(flatten)&lt;&#x2F;code&gt; attribute is used on the &lt;code&gt;ApplicationArguments&lt;&#x2F;code&gt; struct field. The result effectively replaces this field with the contents of the &lt;code&gt;SubCommand&lt;&#x2F;code&gt; type, which we’ll get to next. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If we didn’t use flatten, then the user would need to use the CLI like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;## No subcommand flattening
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ remotecli subcommand &amp;lt;subcommand&amp;gt; … 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But with the flattening we get a simplified form without the &lt;code&gt;subcommand&lt;&#x2F;code&gt; literal.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;## With subcommand flattening
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ remotecli &amp;lt;subcommand&amp;gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason for this pattern is to allow grouping of the subcommands into a type that we can pattern match on, which is nice for the developer. But at the same time we keep the CLI hierarchy minimal for the user.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;subcommand&quot;&gt;SubCommand&lt;a class=&quot;zola-anchor&quot; href=&quot;#subcommand&quot; aria-label=&quot;Anchor link for: subcommand&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the only valid values for our subcommands
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;SubCommand {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Start the remote command gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   StartServer(ServerOptions),
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Send a remote command to the gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(setting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; structopt::clap::AppSettings::TrailingVarArg)]
&lt;&#x2F;span&gt;&lt;span&gt;   Run(RemoteCommandOptions),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We’re working with an enum this time. But again, the most important part is the &lt;code&gt;derive(StructOpt)&lt;&#x2F;code&gt; attribute.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The reason to use an enum is to provide some development comfort. Each field in the enum takes in a struct where additional parsing occurs in the event that the subcommand is chosen. But this pattern enables us to not mix that up within this enum and make the code unfocused, and hard to read.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second most important detail is to notice the comments with 3 slashes &lt;code&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;These are &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;comments.html#doc-comments&quot;&gt;doc comments&lt;&#x2F;a&gt;, and their placement is intentional. Rust will use these comments in the generated help command. The 2 slash comments are notes just for you, the developer, and are not seen by the user.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;For the first subcommand, admittedly I named this field &lt;code&gt;StartServer&lt;&#x2F;code&gt; so I could show off using the &lt;code&gt;structopt(name)&lt;&#x2F;code&gt; attribute.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Without the attribute, the user would experience the subcommand transformed by default into the “kebab-case” form &lt;code&gt;start-command&lt;&#x2F;code&gt;. With the &lt;code&gt;name&lt;&#x2F;code&gt; defined on the StartServer field, we tell Rust that we want the user to use &lt;code&gt;server&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;p&gt;(You can configure this behavior with the &lt;code&gt;structopt(rename_all)&lt;&#x2F;code&gt; attribute. I won’t be covering that. &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;structopt&#x2F;0.3.16&#x2F;structopt&#x2F;#specifying-argument-types&quot;&gt;Read more about rename_all in the docs&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The second subcommand &lt;code&gt;Run&lt;&#x2F;code&gt;... you’ll have to forgive my 👋hand waving👋.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remember that StructOpt is built on top of the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;Clap&lt;&#x2F;a&gt; crate.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Clap is quite flexible, but I thought it was much harder to use. StructOpt offers the ability to pass configuration to Clap and we’re setting a configuration setting w&#x2F; respect to the parsing behavior for only this subcommand.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We want to pass a full command from the client to the server. But we don’t necessarily know how long that command will be and we don’t want the full command to be parsed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The technical description for this kind of CLI parameter is a “Variable-length Argument” or a VarArg in this case. It is a hint for how to parse the last argument so you don’t need to define an end length -- it just trails off.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We are configuring the &lt;code&gt;Run&lt;&#x2F;code&gt; subcommand to tell Rust that this uses a VarArg. See &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;clap&#x2F;2.33.1&#x2F;clap&#x2F;enum.AppSettings.html#variant.TrailingVarArg&quot;&gt;the Clap docs&lt;&#x2F;a&gt; for more info about this and other AppSettings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;serveroptions&quot;&gt;ServerOptions&lt;a class=&quot;zola-anchor&quot; href=&quot;#serveroptions&quot; aria-label=&quot;Anchor link for: serveroptions&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `server` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ServerOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_listen_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Our &lt;code&gt;server&lt;&#x2F;code&gt; subcommand has a single configurable option.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;structopt(long)&lt;&#x2F;code&gt; attribute specifies that this is an option that the user will specify with the double-hyphen pattern with the name of the option, which will be in kebab-case by default. Therefore the user would use this as &lt;code&gt;--server-listen-addr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;structopt(default_value)&lt;&#x2F;code&gt; is hopefully self-explanatory enough. If the user doesn’t override, the default value will be used. The default value type is a string slice &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, but structopt is converting it into a &lt;code&gt;String&lt;&#x2F;code&gt; by default.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;remotecommandoptions&quot;&gt;RemoteCommandOptions&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecommandoptions&quot; aria-label=&quot;Anchor link for: remotecommandoptions&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `run` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RemoteCommandOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The full command and arguments for the server to execute
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;command: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;run&lt;&#x2F;code&gt; subcommand has 2 possible arguments.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The first, &lt;code&gt;server_addr&lt;&#x2F;code&gt; is an optional &lt;code&gt;structopt(long)&lt;&#x2F;code&gt; argument with a default value that aligns with the &lt;code&gt;server&lt;&#x2F;code&gt; default.&lt;&#x2F;li&gt;
&lt;li&gt;The second &lt;code&gt;command&lt;&#x2F;code&gt; is a required positional argument. Notice how there is no &lt;code&gt;structopt&lt;&#x2F;code&gt; attribute. The resulting vector from the variable-length argument. The parser splits up spaces per word, and provides them in order within the Vec&amp;lt;String&amp;gt;. (Matched quotes are interpreted as a single word in our situation). &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;main&quot;&gt;main()&lt;a class=&quot;zola-anchor&quot; href=&quot;#main&quot; aria-label=&quot;Anchor link for: main&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = ApplicationArguments::from_args();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; args.subcommand {
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::StartServer(opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Start the server on: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, opts.server_listen_addr);
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::Run(rc_opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Run command: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, rc_opts.command);
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;main()&lt;&#x2F;code&gt; is short and focused.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Our return type is a &lt;code&gt;Result&lt;&#x2F;code&gt;. We return &lt;code&gt;()&lt;&#x2F;code&gt; when things are good, and returns a boxed &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;types&#x2F;trait-object.html&quot;&gt;trait object&lt;&#x2F;a&gt; that implements the &lt;code&gt;std::error::Error&lt;&#x2F;code&gt; trait as our error (the return trait object is boxed, because Rust doesn’t know how much space to allocate).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We parse the user input using our StructOpt customized &lt;code&gt;ApplicationArguments&lt;&#x2F;code&gt; struct with &lt;code&gt;from_args()&lt;&#x2F;code&gt;. What’s great is invalid inputs are handled, and so we don’t need to spend any time straying from the happy path.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After the parsing, we need to know what action to take next. We’ll either take a server action, or take a client action.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We pattern match on our &lt;code&gt;SubCommand&lt;&#x2F;code&gt; struct, and &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;flow_control&#x2F;match&#x2F;destructuring&#x2F;destructure_enum.html&quot;&gt;destructure the enum’s internal structs&lt;&#x2F;a&gt; for the additional arguments.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We eventually will call out to the respective server or client to pass along the args. However for now we call &lt;code&gt;println!()&lt;&#x2F;code&gt; to display the values.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;all-together&quot;&gt;All together&lt;a class=&quot;zola-anchor&quot; href=&quot;#all-together&quot; aria-label=&quot;Anchor link for: all-together&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;main.rs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;structopt::StructOpt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `server` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ServerOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_listen_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `run` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RemoteCommandOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The full command and arguments for the server to execute
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;command: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the only valid values for our subcommands
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;SubCommand {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Start the remote command gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   StartServer(ServerOptions),
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Send a remote command to the gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(setting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; structopt::clap::AppSettings::TrailingVarArg)]
&lt;&#x2F;span&gt;&lt;span&gt;   Run(RemoteCommandOptions),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; This is the main arguments structure that we&amp;#39;ll parse from
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(StructOpt, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ApplicationArguments {
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(flatten)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;subcommand: SubCommand,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = ApplicationArguments::from_args();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; args.subcommand {
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::StartServer(opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Start the server on: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, opts.server_listen_addr);
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::Run(rc_opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Run command: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, rc_opts.command);
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that’s what we’ve done so far. This will be the full extent of the command line parsing functionality for this example, but we’ll revisit the &lt;code&gt;main()&lt;&#x2F;code&gt; function later.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re following along, this code works with the &lt;code&gt;cargo.toml&lt;&#x2F;code&gt; provided at the top of this section. Play around using &lt;code&gt;cargo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For example try the following commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo run --&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo run -- server&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo run -- server -h&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo run -- run&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo run -- run ls -al&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo run -- run -h&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo run -- blahblahblah&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;protocol-buffers&quot;&gt;Protocol Buffers&lt;a class=&quot;zola-anchor&quot; href=&quot;#protocol-buffers&quot; aria-label=&quot;Anchor link for: protocol-buffers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;[object]&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;what-are-protocol-buffers&quot;&gt;What are Protocol Buffers?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-protocol-buffers&quot; aria-label=&quot;Anchor link for: what-are-protocol-buffers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;proto3&quot;&gt;Protocol Buffers&lt;&#x2F;a&gt; (protobufs) are a way to define a data schema for how your data is structured as well as how to define how programs interface with each other w&#x2F; respect to your data in a language-independent manner.&lt;&#x2F;p&gt;
&lt;p&gt;This is achieved by writing your data in the protobuf format and compiling it into a supported language of your choice as implemented as &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;gRPC&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The result of the compilation generates a lot of boilerplate code.&lt;&#x2F;p&gt;
&lt;p&gt;Not just data structures with the same shape and naming conventions for your language’s native data types. But also generates the gRPC network code for the client that sends or the server that receives these generated data structures.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;For what it’s worth, an added bonus are servers and clients having the possibility to be  implemented in different languages and inter-operate without issue due to. But we’re going to continue to work entirely in Rust for this example&lt;&#x2F;p&gt;
&lt;h3 id=&quot;where-should-protobuf-live-in-the-codebase&quot;&gt;Where should protobuf live in the codebase?&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-should-protobuf-live-in-the-codebase&quot; aria-label=&quot;Anchor link for: where-should-protobuf-live-in-the-codebase&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Before jumping into the protobuf, I wanted to mention my practice for where to keep the file itself.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ tree
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.lock
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── proto
&lt;&#x2F;span&gt;&lt;span&gt;│   └── cli.proto
&lt;&#x2F;span&gt;&lt;span&gt;└── src
&lt;&#x2F;span&gt;&lt;span&gt;    └── main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I like to keep the protobuf in a directory named &lt;code&gt;proto&lt;&#x2F;code&gt; typically at the same level as the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; because as we’ll see soon, the build script will need to reference a path to the protobuf for compilation. The file name itself is arbitrary and &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.karlton.org&#x2F;2017&#x2F;12&#x2F;naming-things-hard&#x2F;&quot;&gt;naming things is hard&lt;&#x2F;a&gt; so do your best to support your future self with meaningful names.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-example-protobuf&quot;&gt;The example protobuf&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-example-protobuf&quot; aria-label=&quot;Anchor link for: the-example-protobuf&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;cli-proto&quot;&gt;cli.proto&lt;a class=&quot;zola-anchor&quot; href=&quot;#cli-proto&quot; aria-label=&quot;Anchor link for: cli-proto&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;proto&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-proto &quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;syntax &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;proto3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;remotecli;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Command input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;CommandInput {
&lt;&#x2F;span&gt;&lt;span&gt; string command = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;repeated &lt;&#x2F;span&gt;&lt;span&gt;string args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Command output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;CommandOutput {
&lt;&#x2F;span&gt;&lt;span&gt; string output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Service definition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span&gt;RemoteCLI {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;rpc &lt;&#x2F;span&gt;&lt;span&gt;Shell(CommandInput) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;returns &lt;&#x2F;span&gt;&lt;span&gt;(CommandOutput);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We start the file off by declaring the particular version of syntax we’re using. &lt;code&gt;proto3&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We need to provide a package name.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;overview#packages&quot;&gt;proto3 docs&lt;&#x2F;a&gt; say this is optional, but our protobuf Rust code generator &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;prost&quot;&gt;Prost&lt;&#x2F;a&gt; requires it to be defined for module namespacing and naming the resulting file.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Defined are 2 data structures, called &lt;code&gt;message&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The order of the fields are numbered and are important for identifying fields in the wire protocol when they are serialized&#x2F;deserialized for gRPC communication.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The numbers in the message must be unique and the best practice is to not change the numbers once in use. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(For more details, read more about Field numbers &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;proto3#assigning_field_numbers&quot;&gt;in the docs&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;CommandInput&lt;&#x2F;code&gt; message has 2 &lt;code&gt;string&lt;&#x2F;code&gt; fields - one singular and the other &lt;code&gt;repeated&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The main executable, which we refer to as &lt;code&gt;command&lt;&#x2F;code&gt; the first word of the user input.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The rest of the user input is reserved for &lt;code&gt;args&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The separation is meant to provide structure for the way a command interpreter like Bash defines commands.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;CommandOutput&lt;&#x2F;code&gt; message doesn’t need quite as much structure. After a command is run, the Standard Output will be returned as a single block of text.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Finally, we define a service &lt;code&gt;RemoteCLI&lt;&#x2F;code&gt; with a single endpoint &lt;code&gt;Shell&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Shell&lt;&#x2F;code&gt; takes a &lt;code&gt;CommandInput&lt;&#x2F;code&gt; and returns a &lt;code&gt;CommandOutput&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;compile-the-protobuf-into-rust-code-with-tonic&quot;&gt;Compile the protobuf into Rust code with Tonic&lt;a class=&quot;zola-anchor&quot; href=&quot;#compile-the-protobuf-into-rust-code-with-tonic&quot; aria-label=&quot;Anchor link for: compile-the-protobuf-into-rust-code-with-tonic&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
 
    
        
    
&lt;div class=&quot;blog-image&quot;&gt;
        &lt;img src=&quot;[object]&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now that we have a protobuf, how do we use it in our Rust program when we need to use the generated code?&lt;&#x2F;p&gt;
&lt;p&gt;Well, we need to configure the build to compile the protobuf into Rust first.&lt;&#x2F;p&gt;
&lt;p&gt;The way we accomplish that is by using a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;cargo&#x2F;build_scripts.html&quot;&gt;build script&lt;&#x2F;a&gt; (Surprise! Written in Rust) but is compiled and executed before the rest of the compilation occurs.&lt;&#x2F;p&gt;
&lt;p&gt;Cargo will run your build script if you have a file named &lt;code&gt;build.rs&lt;&#x2F;code&gt; in your project root.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ tree
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── build.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── proto
&lt;&#x2F;span&gt;&lt;span&gt;│   └── cli.proto
&lt;&#x2F;span&gt;&lt;span&gt;└── src
&lt;&#x2F;span&gt;&lt;span&gt;    └── main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;build-rs&quot;&gt;build.rs&lt;a class=&quot;zola-anchor&quot; href=&quot;#build-rs&quot; aria-label=&quot;Anchor link for: build-rs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;   tonic_build::compile_protos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;proto&#x2F;cli.proto&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The build script is just a small Rust program with a &lt;code&gt;main()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;We’re using &lt;code&gt;tonic_build&lt;&#x2F;code&gt; to compile our proto into Rust. We’ll see more &lt;code&gt;tonic&lt;&#x2F;code&gt; soon for the rest of our gRPC journey.&lt;&#x2F;p&gt;
&lt;p&gt;But for now we only need to add this crate into our &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; as a build dependency.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Cargo.toml&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;cli-grpc-tonic-blocking&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;T.J. Telan &amp;lt;t.telan@gmail.com&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;2018&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# CLI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;structopt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# protobuf-&amp;gt;Rust compiler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;tonic-build &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.3.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Build dependencies are listed under its own section &lt;code&gt;[build-dependencies]&lt;&#x2F;code&gt;.  If you didn’t know, your build scripts can only use crates listed in this section, and vice versa with the main package.&lt;&#x2F;p&gt;
&lt;p&gt;You can look at the resulting Rust code in your &lt;code&gt;target&lt;&#x2F;code&gt; directory when you &lt;code&gt;cargo build&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll have more than one directory with your package name plus extra generated characters due to build script output. So you may need to look through multiple directories.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ tree target&#x2F;debug&#x2F;build&#x2F;cli-grpc-tonic-blocking-aa0556a3d0cd89ff&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;target&#x2F;debug&#x2F;build&#x2F;cli-grpc-tonic-blocking-aa0556a3d0cd89ff&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── invoked.timestamp
&lt;&#x2F;span&gt;&lt;span&gt;├── out
&lt;&#x2F;span&gt;&lt;span&gt;│   └── remotecli.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── output
&lt;&#x2F;span&gt;&lt;span&gt;├── root-output
&lt;&#x2F;span&gt;&lt;span&gt;└── stderr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll leave the contents of the generated code to those following along, since there’s a lot of it and the relevant info is either from the proto or will be covered in the server and client implementation.&lt;&#x2F;p&gt;
&lt;p&gt;This code will only generate once. Or unless you make changes to &lt;code&gt;build.rs&lt;&#x2F;code&gt;. So if you make changes to your proto and you want to regenerate code, you can force a code regen by using &lt;code&gt;touch&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ touch build.rs
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;a class=&quot;zola-anchor&quot; href=&quot;#server&quot; aria-label=&quot;Anchor link for: server&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Moving onto writing our server now that we can use the protobuf generated code. We’re going to write the server (and client) in a new module.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ tree
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── build.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── proto
&lt;&#x2F;span&gt;&lt;span&gt;│   └── cli.proto
&lt;&#x2F;span&gt;&lt;span&gt;└── src
&lt;&#x2F;span&gt;&lt;span&gt;    ├── main.rs
&lt;&#x2F;span&gt;&lt;span&gt;    └── remotecli
&lt;&#x2F;span&gt;&lt;span&gt;        ├── mod.rs
&lt;&#x2F;span&gt;&lt;span&gt;        └── server.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cargo-toml&quot;&gt;Cargo.toml&lt;a class=&quot;zola-anchor&quot; href=&quot;#cargo-toml&quot; aria-label=&quot;Anchor link for: cargo-toml&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;cli-grpc-tonic-blocking&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;T.J. Telan &amp;lt;t.telan@gmail.com&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;2018&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# gRPC server&#x2F;client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;tonic &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.3.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;prost &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.6&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# CLI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;structopt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# Async runtime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;full&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;# protobuf-&amp;gt;Rust compiler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;tonic-build &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0.3.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;This is the last change we’ll be making to Cargo.toml.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We’re adding in &lt;code&gt;tonic&lt;&#x2F;code&gt; and &lt;code&gt;prost&lt;&#x2F;code&gt; as we implement the gRPC server&#x2F;client. &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;prost&quot;&gt;Prost&lt;&#x2F;a&gt; is the implementation of protocol buffers in Rust, and is needed to compile the generated code when we include it into the rest of the package.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot;&gt;Tokio&lt;&#x2F;a&gt; is the async runtime we’re using. The gRPC server&#x2F;client are &lt;code&gt;async&lt;&#x2F;code&gt; and we will need to adjust our &lt;code&gt;main()&lt;&#x2F;code&gt; to communicate more in the code that we’re now calling async functions..&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remotecli-mod-rs&quot;&gt;remotecli&#x2F;mod.rs&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-mod-rs&quot; aria-label=&quot;Anchor link for: remotecli-mod-rs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;server;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To keep the implementations organized, we’ll separate the server and client code further into their own modules. Starting with the server.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remotecli-server-rs&quot;&gt;remotecli&#x2F;server.rs&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-server-rs&quot; aria-label=&quot;Anchor link for: remotecli-server-rs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Similar to the frontend CLI walkthrough, I’ll break this file up into pieces and review them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;At the &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;lets-build-a-single-binary-grpc-server-client-with-rust-in-2020&#x2F;#remotecli-server-rs-all-together&quot;&gt;bottom of this file’s section&lt;&#x2F;a&gt; I’ll have the complete file there for copy&#x2F;paste purposes.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;imports&quot;&gt;Imports&lt;a class=&quot;zola-anchor&quot; href=&quot;#imports&quot; aria-label=&quot;Anchor link for: imports&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tonic::{transport::Server, Request, Response, Status};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Import the generated rust code into module
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto {
&lt;&#x2F;span&gt;&lt;span&gt;   tonic::include_proto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto generated server traits
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::remote_cli_server::{RemoteCli, RemoteCliServer};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto message structs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::{CommandInput, CommandOutput};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; For the server listening address
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::ServerOptions;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; For executing commands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::process::{Command, Stdio};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At the top of the file, we declare a module &lt;code&gt;remotecli_proto&lt;&#x2F;code&gt; that is intended to be scoped only in this file. The name &lt;code&gt;remotecli_proto&lt;&#x2F;code&gt; is arbitrary and for clarity purposes. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;tonic::include_proto!()&lt;&#x2F;code&gt; macro effectively copy&#x2F;pastes our protobuf translated Rust code (as per protobuf package name)  into the module.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The naming conventions of the protobuf translation can be a little confusing at first, but it is all consistent.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Our protobuf’s &lt;code&gt;RemoteCLI&lt;&#x2F;code&gt; service generates separate client and server modules using &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Snake_case&quot;&gt;snake case&lt;&#x2F;a&gt; + &lt;code&gt;_server&lt;&#x2F;code&gt; or &lt;code&gt;_client&lt;&#x2F;code&gt;. While generated trait definitions use &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Camel_case&quot;&gt;Pascal case&lt;&#x2F;a&gt; (a specific form of camel case with initial letter capitalized).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From the server specific generated code, we are importing a trait &lt;code&gt;RemoteCli&lt;&#x2F;code&gt; which requires that we implement our gRPC endpoint &lt;code&gt;Shell&lt;&#x2F;code&gt; with the same function signature.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Additionally we import &lt;code&gt;RemoteCliServer&lt;&#x2F;code&gt;, a generated server implementation that handles all the gRPC networking semantics but requires that we instantiate with a struct that implements the &lt;code&gt;RemoteCli&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The last import from the gRPC code are our protobuf messages &lt;code&gt;CommandInput&lt;&#x2F;code&gt; and &lt;code&gt;CommandOutput&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From our frontend, we are importing the &lt;code&gt;ServerOptions&lt;&#x2F;code&gt; struct, since we are going to pass the user input in for the server listening address.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;At last, we import from &lt;code&gt;std::process&lt;&#x2F;code&gt;. &lt;code&gt;Command&lt;&#x2F;code&gt; and &lt;code&gt;Stdio&lt;&#x2F;code&gt; - for executing commands and capturing output.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;remotecli-trait-implementation&quot;&gt;RemoteCli Trait implementation&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-trait-implementation&quot; aria-label=&quot;Anchor link for: remotecli-trait-implementation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Cli {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[tonic::async_trait]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;RemoteCli &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Cli {
&lt;&#x2F;span&gt;&lt;span&gt;   async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;shell(
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;       request: Request&amp;lt;CommandInput&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   ) -&amp;gt; Result&amp;lt;Response&amp;lt;CommandOutput&amp;gt;, Status&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; req_command = request.into_inner();
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = req_command.command;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = req_command.args;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Running command: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt; - args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;command, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;args);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; process = Command::new(command)
&lt;&#x2F;span&gt;&lt;span&gt;           .args(args)
&lt;&#x2F;span&gt;&lt;span&gt;           .stdout(Stdio::piped())
&lt;&#x2F;span&gt;&lt;span&gt;           .spawn()
&lt;&#x2F;span&gt;&lt;span&gt;           .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;failed to execute child process&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = process
&lt;&#x2F;span&gt;&lt;span&gt;           .wait_with_output()
&lt;&#x2F;span&gt;&lt;span&gt;           .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;failed to wait on child process&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = output.stdout;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       Ok(Response::new(CommandOutput {
&lt;&#x2F;span&gt;&lt;span&gt;           output: String::from_utf8(output).unwrap(),
&lt;&#x2F;span&gt;&lt;span&gt;       }))
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We declare our own struct &lt;code&gt;Cli&lt;&#x2F;code&gt; because we need to &lt;code&gt;impl RemoteCli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Our generated code uses an &lt;code&gt;async&lt;&#x2F;code&gt; method. We add &lt;code&gt;#[tonic::async_trait]&lt;&#x2F;code&gt; to our trait impl so the server can use &lt;code&gt;async fn&lt;&#x2F;code&gt; on our method. We just have one method to define, &lt;code&gt;async fn shell()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;I’m 👋waving my hands👋 here for the function signature, but the way I initially learned how to write them was to go into the generated code, skimmed the code within the &lt;code&gt;remote_cli_server&lt;&#x2F;code&gt; module and modified the crate paths.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first thing we do when we enter &lt;code&gt;shell&lt;&#x2F;code&gt; is peel off the &lt;code&gt;tonic&lt;&#x2F;code&gt; wrapping from &lt;code&gt;request&lt;&#x2F;code&gt; with &lt;code&gt;.into_inner()&lt;&#x2F;code&gt;. We further separate the ownership of data into &lt;code&gt;command&lt;&#x2F;code&gt; and &lt;code&gt;args&lt;&#x2F;code&gt; vars.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We build out &lt;code&gt;process&lt;&#x2F;code&gt; as the &lt;code&gt;std::process::Command&lt;&#x2F;code&gt; struct so we can spawn the user’s process and capture stdout.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Then we wait for &lt;code&gt;process&lt;&#x2F;code&gt; to exit and collect the output with &lt;code&gt;.wait_with_output()&lt;&#x2F;code&gt;. We just want &lt;code&gt;stdout&lt;&#x2F;code&gt; so we further take ownership of just that handle.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Last, we build a &lt;code&gt;tonic::Response&lt;&#x2F;code&gt;, converting the process stdout into a &lt;code&gt;String&lt;&#x2F;code&gt; while we instantiate our &lt;code&gt;CommandOutput&lt;&#x2F;code&gt;. Finally wrapping the &lt;code&gt;Response&lt;&#x2F;code&gt; in a &lt;code&gt;Result&lt;&#x2F;code&gt; and returning it to the client.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;start-server&quot;&gt;start_server&lt;a class=&quot;zola-anchor&quot; href=&quot;#start-server&quot; aria-label=&quot;Anchor link for: start-server&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;start_server(opts: ServerOptions) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr = opts.server_listen_addr.parse().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cli_server = Cli::default();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;RemoteCliServer listening on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, addr);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Server::builder()
&lt;&#x2F;span&gt;&lt;span&gt;       .add_service(RemoteCliServer::new(cli_server))
&lt;&#x2F;span&gt;&lt;span&gt;       .serve(addr)
&lt;&#x2F;span&gt;&lt;span&gt;       .await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;This function will be used by the frontend for the purpose of starting the server.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;The listening address is passed in through &lt;code&gt;opts&lt;&#x2F;code&gt;. It’s passed in as a &lt;code&gt;String&lt;&#x2F;code&gt;, but the compiler figures out what type we mean when we call &lt;code&gt;.parse()&lt;&#x2F;code&gt; due to how we use it later.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;We instantiate &lt;code&gt;cli_server&lt;&#x2F;code&gt; with the &lt;code&gt;Cli&lt;&#x2F;code&gt; struct which we implemented as the protobuf trait &lt;code&gt;RemoteCli&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tonic::Server::builder()&lt;&#x2F;code&gt; creates our gRPC server instance.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;.add_service()&lt;&#x2F;code&gt; method takes &lt;code&gt;RemoteCliServer::new(cli_server)&lt;&#x2F;code&gt; to create a gRPC server with our generated endpoints via &lt;code&gt;RemoteCliServer&lt;&#x2F;code&gt; and our trait impl via &lt;code&gt;cli_server&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;serve()&lt;&#x2F;code&gt; method takes in our parsed listening address, providing the hint the compiler needed to infer the required type and returns an &lt;code&gt;async Result&amp;lt;T&amp;gt; &lt;&#x2F;code&gt; for us to &lt;code&gt;.await&lt;&#x2F;code&gt; on.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;main-rs-so-far&quot;&gt;main.rs - so far&lt;a class=&quot;zola-anchor&quot; href=&quot;#main-rs-so-far&quot; aria-label=&quot;Anchor link for: main-rs-so-far&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We are making small changes to &lt;code&gt;main.rs&lt;&#x2F;code&gt; to plug in the server module. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;remotecli;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;structopt::StructOpt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `server` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ServerOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_listen_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `run` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RemoteCommandOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The full command and arguments for the server to execute
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;command: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the only valid values for our subcommands
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;SubCommand {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Start the remote command gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   StartServer(ServerOptions),
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Send a remote command to the gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(setting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; structopt::clap::AppSettings::TrailingVarArg)]
&lt;&#x2F;span&gt;&lt;span&gt;   Run(RemoteCommandOptions),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; This is the main arguments structure that we&amp;#39;ll parse from
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(StructOpt, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ApplicationArguments {
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(flatten)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;subcommand: SubCommand,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[tokio::main]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = ApplicationArguments::from_args();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; args.subcommand {
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::StartServer(opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Start the server on: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, opts.server_listen_addr);
&lt;&#x2F;span&gt;&lt;span&gt;           remotecli::server::start_server(opts).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::Run(rc_opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Run command: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, rc_opts.command);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We now import our &lt;code&gt;remotecli&lt;&#x2F;code&gt; module.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;main()&lt;&#x2F;code&gt; function changes slightly as well. First, we change the function to be &lt;code&gt;async&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We add the &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; attribute to mark the async function for execution.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;And we call our new &lt;code&gt;start_server()&lt;&#x2F;code&gt; to actually start a server when the user runs the &lt;code&gt;server&lt;&#x2F;code&gt; subcommand.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;remotecli-server-rs-all-together&quot;&gt;remotecli&#x2F;server.rs all together&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-server-rs-all-together&quot; aria-label=&quot;Anchor link for: remotecli-server-rs-all-together&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s the final form of the server module.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tonic::{transport::Server, Request, Response, Status};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Import the generated rust code into module
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto {
&lt;&#x2F;span&gt;&lt;span&gt;   tonic::include_proto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto generated server traits
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::remote_cli_server::{RemoteCli, RemoteCliServer};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto message structs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::{CommandInput, CommandOutput};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; For the server listening address
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::ServerOptions;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; For executing commands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::process::{Command, Stdio};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Cli {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[tonic::async_trait]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;RemoteCli &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Cli {
&lt;&#x2F;span&gt;&lt;span&gt;   async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;shell(
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;       request: Request&amp;lt;CommandInput&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   ) -&amp;gt; Result&amp;lt;Response&amp;lt;CommandOutput&amp;gt;, Status&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; req_command = request.into_inner();
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = req_command.command;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = req_command.args;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Running command: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt; - args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;command, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;args);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; process = Command::new(command)
&lt;&#x2F;span&gt;&lt;span&gt;           .args(args)
&lt;&#x2F;span&gt;&lt;span&gt;           .stdout(Stdio::piped())
&lt;&#x2F;span&gt;&lt;span&gt;           .spawn()
&lt;&#x2F;span&gt;&lt;span&gt;           .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;failed to execute child process&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = process
&lt;&#x2F;span&gt;&lt;span&gt;           .wait_with_output()
&lt;&#x2F;span&gt;&lt;span&gt;           .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;failed to wait on child process&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = output.stdout;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       Ok(Response::new(CommandOutput {
&lt;&#x2F;span&gt;&lt;span&gt;           output: String::from_utf8(output).unwrap(),
&lt;&#x2F;span&gt;&lt;span&gt;       }))
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;start_server(opts: ServerOptions) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr = opts.server_listen_addr.parse().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cli_server = Cli::default();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;RemoteCliServer listening on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, addr);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Server::builder()
&lt;&#x2F;span&gt;&lt;span&gt;       .add_service(RemoteCliServer::new(cli_server))
&lt;&#x2F;span&gt;&lt;span&gt;       .serve(addr)
&lt;&#x2F;span&gt;&lt;span&gt;       .await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that’s the server implementation and the frontend code for starting the server. It is a surprisingly small amount of code.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;You can start an instance of the server by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; server
&lt;&#x2F;span&gt;&lt;span&gt;[...]
&lt;&#x2F;span&gt;&lt;span&gt;Start the server on: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;127.0.0.1:50051&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;RemoteCliServer listening on 127.0.0.1:50051
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;client&quot;&gt;Client&lt;a class=&quot;zola-anchor&quot; href=&quot;#client&quot; aria-label=&quot;Anchor link for: client&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We’re in the homestretch. Implementing a client. We’re going to create a new module within &lt;code&gt;remotecli&lt;&#x2F;code&gt; called &lt;code&gt;client.rs&lt;&#x2F;code&gt; that will follow the same patterns as we established for the server.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ tree
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── build.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── proto
&lt;&#x2F;span&gt;&lt;span&gt;│   └── cli.proto
&lt;&#x2F;span&gt;&lt;span&gt;└── src
&lt;&#x2F;span&gt;&lt;span&gt;    ├── main.rs
&lt;&#x2F;span&gt;&lt;span&gt;    └── remotecli
&lt;&#x2F;span&gt;&lt;span&gt;      	├── client.rs
&lt;&#x2F;span&gt;&lt;span&gt;        ├── mod.rs
&lt;&#x2F;span&gt;&lt;span&gt;        └── server.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;remotecli-mod-rs-1&quot;&gt;remotecli&#x2F;mod.rs&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-mod-rs-1&quot; aria-label=&quot;Anchor link for: remotecli-mod-rs-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;client;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;server;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’re declaring the client module within &lt;code&gt;mod.rs&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;remotecli-client-rs&quot;&gt;remotecli&#x2F;client.rs&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-client-rs&quot; aria-label=&quot;Anchor link for: remotecli-client-rs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Our client is a lot more straightforward. But splitting the module up into pieces for description purposes. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Again, full file is at &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;lets-build-a-single-binary-grpc-server-client-with-rust-in-2020&#x2F;#remotecli-client-rs-all-together&quot;&gt;the end of the section&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;imports-1&quot;&gt;Imports&lt;a class=&quot;zola-anchor&quot; href=&quot;#imports-1&quot; aria-label=&quot;Anchor link for: imports-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto {
&lt;&#x2F;span&gt;&lt;span&gt;   tonic::include_proto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto generated client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::remote_cli_client::RemoteCliClient;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto message structs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::CommandInput;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::RemoteCommandOptions;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Just like in our server, we create a module &lt;code&gt;remotecli_proto&lt;&#x2F;code&gt; and we use the &lt;code&gt;tonic::include_proto!()&lt;&#x2F;code&gt; macro to copy&#x2F;paste our generated code into this module.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We then include the generated &lt;code&gt;RemoteCliClient&lt;&#x2F;code&gt; to connect, and the &lt;code&gt;CommandInput&lt;&#x2F;code&gt; struct since that is what we send over to the server.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Last include is the &lt;code&gt;RemoteCommandOptions&lt;&#x2F;code&gt; struct from the frontend so we can pass in the server address we want to connect to.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;client-run&quot;&gt;client_run&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-run&quot; aria-label=&quot;Anchor link for: client-run&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;client_run(rc_opts: RemoteCommandOptions) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Connect to server
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Use server addr if given, otherwise use default
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; client = RemoteCliClient::connect(rc_opts.server_addr).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request = tonic::Request::new(CommandInput {
&lt;&#x2F;span&gt;&lt;span&gt;       command: rc_opts.command[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].clone().into(),
&lt;&#x2F;span&gt;&lt;span&gt;       args: rc_opts.command[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;].to_vec(),
&lt;&#x2F;span&gt;&lt;span&gt;   });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = client.shell(request).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;RESPONSE=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, response);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The helper function &lt;code&gt;client_run()&lt;&#x2F;code&gt; is an &lt;code&gt;async&lt;&#x2F;code&gt; function like our server. The frontend passes in a &lt;code&gt;RemoteCommandOptions&lt;&#x2F;code&gt; struct for the server address info as well as our raw user command.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;First thing we do is create &lt;code&gt;client&lt;&#x2F;code&gt; and connect to the server with &lt;code&gt;RemoteCliClient::connect&lt;&#x2F;code&gt; and do an &lt;code&gt;.await&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Then we build our request by creating a &lt;code&gt;tonic::Request&lt;&#x2F;code&gt; struct with our &lt;code&gt;CommandInput&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The user command is raw and needs to be sliced up to fit the shape of what the server expects. The first word of the user command is the shell command, and the rest are the arguments.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Lastly we use &lt;code&gt;client&lt;&#x2F;code&gt; and call our endpoint with our request and &lt;code&gt;.await&lt;&#x2F;code&gt; for the execution to complete.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;main-rs&quot;&gt;main.rs&lt;a class=&quot;zola-anchor&quot; href=&quot;#main-rs&quot; aria-label=&quot;Anchor link for: main-rs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is the final form of &lt;code&gt;main.rs&lt;&#x2F;code&gt;. The last thing we do to &lt;code&gt;main.rs&lt;&#x2F;code&gt; is plug in our &lt;code&gt;client_run()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;remotecli;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;structopt::StructOpt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `server` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ServerOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_listen_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the options used by the `run` subcommand
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RemoteCommandOptions {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The address of the server that will run commands.
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;127.0.0.1:50051&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;server_addr: String,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; The full command and arguments for the server to execute
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;command: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; These are the only valid values for our subcommands
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;SubCommand {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Start the remote command gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;   StartServer(ServerOptions),
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Send a remote command to the gRPC server
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(setting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; structopt::clap::AppSettings::TrailingVarArg)]
&lt;&#x2F;span&gt;&lt;span&gt;   Run(RemoteCommandOptions),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; This is the main arguments structure that we&amp;#39;ll parse from
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(StructOpt, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ApplicationArguments {
&lt;&#x2F;span&gt;&lt;span&gt;   #[structopt(flatten)]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;subcommand: SubCommand,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[tokio::main]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = ApplicationArguments::from_args();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; args.subcommand {
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::StartServer(opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Start the server on: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, opts.server_listen_addr);
&lt;&#x2F;span&gt;&lt;span&gt;           remotecli::server::start_server(opts).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       SubCommand::Run(rc_opts) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Run command: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, rc_opts.command);
&lt;&#x2F;span&gt;&lt;span&gt;           remotecli::client::client_run(rc_opts).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;remotecli-client-rs-all-together&quot;&gt;remotecli&#x2F;client.rs all together&lt;a class=&quot;zola-anchor&quot; href=&quot;#remotecli-client-rs-all-together&quot; aria-label=&quot;Anchor link for: remotecli-client-rs-all-together&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto {
&lt;&#x2F;span&gt;&lt;span&gt;   tonic::include_proto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;remotecli&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto generated client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::remote_cli_client::RemoteCliClient;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Proto message structs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;remotecli_proto::CommandInput;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::RemoteCommandOptions;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;client_run(rc_opts: RemoteCommandOptions) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Connect to server
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Use server addr if given, otherwise use default
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; client = RemoteCliClient::connect(rc_opts.server_addr).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request = tonic::Request::new(CommandInput {
&lt;&#x2F;span&gt;&lt;span&gt;       command: rc_opts.command[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].clone().into(),
&lt;&#x2F;span&gt;&lt;span&gt;       args: rc_opts.command[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;].to_vec(),
&lt;&#x2F;span&gt;&lt;span&gt;   });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = client.shell(request).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;RESPONSE=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, response);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;final-demonstration&quot;&gt;Final demonstration&lt;a class=&quot;zola-anchor&quot; href=&quot;#final-demonstration&quot; aria-label=&quot;Anchor link for: final-demonstration&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To see this server-client end-to-end, we&#x27;ll need two terminal windows open. In one, run the server, and in the other we&#x27;ll run a simple &lt;code&gt;ls&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;server-1&quot;&gt;Server&lt;a class=&quot;zola-anchor&quot; href=&quot;#server-1&quot; aria-label=&quot;Anchor link for: server-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; server
&lt;&#x2F;span&gt;&lt;span&gt;[...]
&lt;&#x2F;span&gt;&lt;span&gt;Start the server on: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;127.0.0.1:50051&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;RemoteCliServer listening on 127.0.0.1:50051
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;client-1&quot;&gt;Client&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-1&quot; aria-label=&quot;Anchor link for: client-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; run ls
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;output&quot;&gt;Output&lt;a class=&quot;zola-anchor&quot; href=&quot;#output&quot; aria-label=&quot;Anchor link for: output&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;Run command: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39;[&amp;quot;ls&amp;quot;]&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;RESPONSE=&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#282828;color:#d69d85;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt; { metadata: MetadataMap { headers: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;content-type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;application&#x2F;grpc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;date&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Wed, 19 Aug 2020 00:00:25 GMT&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;grpc-status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;} }, message: CommandOutput { output: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;build.rs\nCargo.toml\nproto\nsrc\n&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;} }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we see, there is still work left to do in order to format the output in a more human readable way. But that is an exercise left to the reader.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We just walked through building a CLI application that parses user input and uses gRPC to send a command from a gRPC client to the server for execution and return of command output.&lt;&#x2F;p&gt;
&lt;p&gt;Based on how we structured the frontend CLI using &lt;code&gt;StructOpt&lt;&#x2F;code&gt;, we allowed both the client and server to compile into a single binary. &lt;&#x2F;p&gt;
&lt;p&gt;Protocol buffers (or protobufs) were used to define the interfaces of the server and the data structures that were used. The &lt;code&gt;Tonic&lt;&#x2F;code&gt; and &lt;code&gt;Prost&lt;&#x2F;code&gt; crates and Cargo build scripts were used to compile the protobufs into native async Rust code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Tokio&lt;&#x2F;code&gt; was our async runtime. We experienced how little code was necessary to support &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt; patterns.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for joining me as I stepped through the details. I hope that this walkthrough satisfies some curiosity about using gRPC for your backend code. As well as piqued your interest in writing some Rust code.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Published First Crate on Crates.io</title>
		<published>2020-02-14T00:00:00+00:00</published>
		<updated>2020-02-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/published-first-crate-on-crates-io/" type="text/html"/>
		<id>https://tjtelan.com/blog/published-first-crate-on-crates-io/</id>
		<content type="html">&lt;p&gt;I published &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;git-url-parse&quot;&gt;my first public crate&lt;&#x2F;a&gt;. I thought my library was useful, general, and did not have a similar implementation in crates.io. I hoped that it may get used by the Rust community. It turned out to be very easy to package and upload my code, and I wanted to share my process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;complete-cargo-toml-with-package-metadata&quot;&gt;Complete Cargo.toml with package metadata&lt;a class=&quot;zola-anchor&quot; href=&quot;#complete-cargo-toml-with-package-metadata&quot; aria-label=&quot;Anchor link for: complete-cargo-toml-with-package-metadata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;manifest.html#package-metadata&lt;&#x2F;p&gt;
&lt;p&gt;I tried to define the metadata completely. Other than writing the code, this took the longest time. I wanted to make sure the crate listed in an appropriate category. As well as using relevant keywords.&lt;&#x2F;p&gt;
&lt;p&gt;(My very first version did not have a README or fancy build badges, but I did have docstrings for docs.rs)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generate-api-key-and-log-in-from-cargo&quot;&gt;Generate API Key and log in from cargo&lt;a class=&quot;zola-anchor&quot; href=&quot;#generate-api-key-and-log-in-from-cargo&quot; aria-label=&quot;Anchor link for: generate-api-key-and-log-in-from-cargo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Crates.io only supports logging in using Github accounts.&lt;&#x2F;p&gt;
&lt;p&gt;Navigate to Account Settings and scroll down to the &lt;em&gt;API Access&lt;&#x2F;em&gt; section. Click new token and give your token a name.&lt;&#x2F;p&gt;
&lt;p&gt;After giving your token a name, there is going to be a &lt;code&gt;cargo login&lt;&#x2F;code&gt; command with a random token value. Run this command to log in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-cargo-publish&quot;&gt;Run cargo publish&lt;a class=&quot;zola-anchor&quot; href=&quot;#run-cargo-publish&quot; aria-label=&quot;Anchor link for: run-cargo-publish&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My crate was at the top of the new crates column of crates.io&lt;&#x2F;p&gt;
&lt;p&gt;Like I mentioned earlier, I had doc strings in my code that I expected to publish to docs.rs. This can take a few minutes. Wait a few minutes. It’ll make it there.&lt;&#x2F;p&gt;
&lt;p&gt;I later followed up with writing a complete README.md, and added badges. That’s all it took to make my little library look fancy.&lt;&#x2F;p&gt;
&lt;p&gt;If you were on the fence about publishing to crates.io, I hope you are now convinced that it was not.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;before-you-go-some-info-about-my-crate&quot;&gt;Before you go, some info about my crate:&lt;a class=&quot;zola-anchor&quot; href=&quot;#before-you-go-some-info-about-my-crate&quot; aria-label=&quot;Anchor link for: before-you-go-some-info-about-my-crate&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;git-url-parse&quot;&gt;git-url-parse&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I wrote it because common ssh-based git repo urls don’t fit a standard like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;url.spec.whatwg.org&#x2F;&quot;&gt;the living URL standard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc1738&quot;&gt;RFC 1738&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc1808.html&quot;&gt;RFC 1808&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As such, parsing is not supported by many languages’ standard library, including Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I hope you&#x27;ll check it out! Thanks!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using a database + gRPC with Rust</title>
		<published>2019-04-25T00:00:00+00:00</published>
		<updated>2020-12-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/using-a-database-grpc-with-rust/" type="text/html"/>
		<id>https://tjtelan.com/blog/using-a-database-grpc-with-rust/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Update: 8&#x2F;19&#x2F;2020&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re here for &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;gRPC&lt;&#x2F;a&gt; or CLI, this post uses old crates and you should read &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;lets-build-a-single-binary-grpc-server-client-with-rust-in-2020&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; instead.&lt;&#x2F;p&gt;
&lt;p&gt;I have a new post using more up-to-date Rust with &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt;. The new guide uses &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;tonic&quot;&gt;Tonic&lt;&#x2F;a&gt; for gRPC and &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt; for CLI. (But no database stuff)&lt;&#x2F;p&gt;
&lt;p&gt;This post is still good if you want to see how to use &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;Diesel&lt;&#x2F;a&gt; with &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt;. But if you&#x27;re here for gRPC, you should check out the &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;lets-build-a-single-binary-grpc-server-client-with-rust-in-2020&#x2F;&quot;&gt;new post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for listening! Now back to your regularly scheduled program...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is a summary of my experience with writing a Rust DB-backed server&#x2F;client with &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;grpc-rs&quot;&gt;grpc-rs&lt;&#x2F;a&gt; to communicate to the backend, and &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;Diesel&lt;&#x2F;a&gt; as an ORM to be used with &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-did-i-want-out-of-this-exercise&quot;&gt;What did I want out of this exercise?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-did-i-want-out-of-this-exercise&quot; aria-label=&quot;Anchor link for: what-did-i-want-out-of-this-exercise&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t consider myself an expert with Rust, also not a beginner. I&#x27;ve been following the Rust language development for a while. I also have been wanting to move from writing code for personal projects to writing for work projects. &lt;&#x2F;p&gt;
&lt;p&gt;I have the privilege to choose the tools I want at work, but I must keep in mind that I don&#x27;t work by myself. I need to be able to provide practical development advice and enough technical mentorship to my teammates to keep us all productive.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@KevinHoffman&#x2F;streaming-grpc-with-rust-d978fece5ef6&quot;&gt;Kevin Hoffman’s blog post&lt;&#x2F;a&gt; let me know that what I wanted was possible today in stable (as opposed to nightly). Kevin’s post is great, but I couldn’t really absorb it my first few reads, because he is a more experienced Rust developer than myself. I didn&#x27;t quite understand the code in his post, and I couldn’t appreciate details he skimmed over which I will point out. I hope that I can provide supplemental details.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;my-target&quot;&gt;My target&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-target&quot; aria-label=&quot;Anchor link for: my-target&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I am looking to build a very basic command line interface client, and a backend service. The cli communicates to the backend via gRPC, and the backend connects to a database.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Based on Kevin Hoffman&#x27;s experience, and the download activity on crates.io, I also used Pingcap&#x27;s library &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;grpc-rs&quot;&gt;grpc-rs&lt;&#x2F;a&gt;. However, while writing this post &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tower-rs&#x2F;tower-grpc&quot;&gt;tower-rs&lt;&#x2F;a&gt; (which is a pure Rust implementation) is considered to be stable, though may not yet implement all features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Database&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For database, I decided to use &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;diesel&quot;&gt;Diesel-rs&lt;&#x2F;a&gt; since there really aren’t any other choices that I felt were better in a production environment. Diesel is a mature project that is very actively supported.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Command line interface&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For the command line interface, I picked &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;clap-rs&lt;&#x2F;a&gt;, because I was interested in trying out defining the command line content and structure with yaml. In the future I would probably use &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt;. It happens to use clap-rs internally, but the written code is easier for me to read, and in my opinion, less code to write derives. For this reason, I’ll probably gloss over the command line implementation. It provides the minimal amount of interaction I needed to highlight what appears to be an idiomatic pattern. &lt;&#x2F;p&gt;
&lt;p&gt;After spending a few hours with all the tools, I wanted to jump in feet first with an example project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-first-attempt-figuring-out-my-development-pattern&quot;&gt;My first attempt figuring out my development pattern&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-first-attempt-figuring-out-my-development-pattern&quot; aria-label=&quot;Anchor link for: my-first-attempt-figuring-out-my-development-pattern&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I briefly considered not telling the parts of the story where I was figuring out how to get everything to compile but here it is. It ended up being a big learning experience. I won&#x27;t get into super deep detail about my intentions since I ended up not going in this direction. But I will highlight what I learned.&lt;&#x2F;p&gt;
&lt;p&gt;I focused on individually building with Diesel and gRPC. Once I felt ready to do something productive with these crates, I started thinking about implementation by designing the protocol buffers first, and designing the database later. This ended up being a time-expensive mistake that hopefully will not need to repeated, dear Reader.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;red-flags-in-the-workflow&quot;&gt;Red flags in the workflow&lt;a class=&quot;zola-anchor&quot; href=&quot;#red-flags-in-the-workflow&quot; aria-label=&quot;Anchor link for: red-flags-in-the-workflow&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I am generating my proto Rust code from &lt;code&gt;.proto&lt;&#x2F;code&gt; using &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;grpc-rs&quot;&gt;grpc-rs&lt;&#x2F;a&gt; in my &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;blob&#x2F;main&#x2F;cli-clap-grpc-pingcap-db-diesel&#x2F;workspace&#x2F;protos&#x2F;build.rs&quot;&gt;build.rs&lt;&#x2F;a&gt;. It runs during &lt;code&gt;cargo build&lt;&#x2F;code&gt;. Based on Diesel&#x27;s &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;diesel.rs&#x2F;guides&#x2F;getting-started&#x2F;&quot;&gt;getting started&lt;&#x2F;a&gt; guide, I expected that I would be annotating my proto Rust with the same &lt;code&gt;#[derive()]&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;But If I&#x27;m going to be using the generated structs w&#x2F; Diesel, then I have to break up the protobuf compilation w&#x2F; some manual step to additionally add in the correct annotations, because the next &lt;code&gt;cargo build&lt;&#x2F;code&gt; regenerated code and removed my manual changes. This was a red flag, but I kept moving forward anyway...&lt;&#x2F;p&gt;
&lt;p&gt;Diesel also expects that your struct fields are 1:1 with your table schema for to use the custom  &lt;code&gt;#[Derive(Queryable)]&lt;&#x2F;code&gt; for querying the DB. If you haven&#x27;t looked at &lt;code&gt;grpc-rs&lt;&#x2F;code&gt; generated grpc code, you&#x27;ll see extra internally used struct fields: &lt;code&gt;unknown_fields&lt;&#x2F;code&gt; and &lt;code&gt;cached_size&lt;&#x2F;code&gt;. These are part of &lt;code&gt;grpc-rs&lt;&#x2F;code&gt;’s implementation of message serialization&#x2F;deserialization. Moving forward could require representing these extra fields in the database, which has a bad smell and is wasteful of space. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Example of grpc-rs generated Rust code w&#x2F; the special fields&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(PartialEq,Clone,Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;OrderForm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; message fields
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;quantity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;product: OilProductType,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; special fields
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;unknown_fields: ::protobuf::UnknownFields,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;cached_size: ::protobuf::CachedSize,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Choosing to work directly with this generated struct means manually modifying the list of derive() and working around the special fields &lt;code&gt;unknown_fields&lt;&#x2F;code&gt; and &lt;code&gt;cached_size&lt;&#x2F;code&gt; so Diesel could still be used inserts and queries. Possibly requiring adding columns in the table schema. This is a more tight coupling than I want between my protobuf library and the data in the database.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;what-i-should-have-done&quot;&gt;What I should have done&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-i-should-have-done&quot; aria-label=&quot;Anchor link for: what-i-should-have-done&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I only realized this after writing the client&#x2F;server using the raw proto structs. I then moved onto designing the db schema and migrations. I got stuck trying to flow the grpc client calls to db inserts.&lt;&#x2F;p&gt;
&lt;p&gt;I concluded that I would need to create new structs that only Diesel would use since their support heavily relies on Derive code. It all felt like an impedance mismatch, and I was having to redo the same work over again without a clear path for where I was going.&lt;&#x2F;p&gt;
&lt;p&gt;This was a failure. If I could work backwards from the database inserts to the protos, then this might work out better for my understanding.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-second-approach&quot;&gt;My second approach&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-second-approach&quot; aria-label=&quot;Anchor link for: my-second-approach&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;before-implementation&quot;&gt;Before implementation&lt;a class=&quot;zola-anchor&quot; href=&quot;#before-implementation&quot; aria-label=&quot;Anchor link for: before-implementation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m still learning how to write idiomatic Rust. When I got my protos compiling into generated Rust code, and assumed I needed to use it directly because it is native code, despite my unfamiliarity with all of the code generated by Pingcap’s gRPC library.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m relying heavily on the use of the Into trait to create a little anti-corruption layer so that the business logic on both my client and my server are not operating directly on the protobuf-generated structs. &lt;em&gt;-- Kevin Hoffman&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After a not-skimmed reading of &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@KevinHoffman&#x2F;streaming-grpc-with-rust-d978fece5ef6&quot;&gt;Kevin&#x27;s Hoffman&#x27;s post&lt;&#x2F;a&gt;, I noticed he described using this same approach in a hand-wavey manner. I wasn&#x27;t ready to appreciate the warning without some example code or a diagram.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;use-separate-structs-for-business-logic&quot;&gt;Use separate structs for business logic&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-separate-structs-for-business-logic&quot; aria-label=&quot;Anchor link for: use-separate-structs-for-business-logic&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I hadn’t immediately considered that I might want to write my own structs instead of using the protobuf-generated structs since my mindset was that the generated code would be ergonomic enough to use code.&lt;&#x2F;p&gt;
&lt;p&gt;However, the strategy of using separate structs offers very easy to use conversions because of the &lt;code&gt;From&lt;&#x2F;code&gt; and &lt;code&gt;Into&lt;&#x2F;code&gt; traits. This would be easier for the maintainability and readability of my code because I can contain that conversion logic in away from my business logic.&lt;&#x2F;p&gt;
&lt;p&gt;I could convert them back and forth between the protobuf-generated forms and the diesel supported forms with &lt;code&gt;.into()&lt;&#x2F;code&gt;. How is this achieved?&lt;&#x2F;p&gt;
&lt;p&gt;More on this during implementation...&lt;&#x2F;p&gt;
&lt;h5 id=&quot;what-is-using-this-pattern-like-in-the-code&quot;&gt;What is using this pattern like in the code?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-using-this-pattern-like-in-the-code&quot; aria-label=&quot;Anchor link for: what-is-using-this-pattern-like-in-the-code&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;An example interaction would look like this&lt;&#x2F;p&gt;
&lt;p&gt;Inserts into the database - Client side:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;User input &lt;&#x2F;li&gt;
&lt;li&gt;Create Diesel struct + any data manipulation &lt;&#x2F;li&gt;
&lt;li&gt;Convert Diesel struct into Proto struct &lt;&#x2F;li&gt;
&lt;li&gt;Send Proto struct in gRPC call&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Inserts into the database - Server side:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Receive Proto struct&lt;&#x2F;li&gt;
&lt;li&gt;Convert Proto struct into Diesel struct + Any data manipulation&lt;&#x2F;li&gt;
&lt;li&gt;Insert into DB&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;the-last-complicated-detail-rust-custom-types-mapping-to-postgres-enums&quot;&gt;The Last complicated detail : Rust custom types mapping to Postgres Enums&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-last-complicated-detail-rust-custom-types-mapping-to-postgres-enums&quot; aria-label=&quot;Anchor link for: the-last-complicated-detail-rust-custom-types-mapping-to-postgres-enums&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I want to use Rust enums and Postgres enums to carry my usage of types all the way to DB insert&#x2F;query. The diesel schema generator doesn&#x27;t handle custom postgres enums well, but we can manage the conversion by hand by using a few Diesel Derives: &lt;code&gt;SqlType&lt;&#x2F;code&gt;, &lt;code&gt;FromSql&lt;&#x2F;code&gt;, and &lt;code&gt;ToSql&lt;&#x2F;code&gt; . I might cover using custom postgres types with Diesel in another post. But for now, I am going to hand-wave this detail.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;blob&#x2F;v1.3.1&#x2F;diesel_tests&#x2F;tests&#x2F;custom_types.rs&quot;&gt;Diesel-rs custom types tests&lt;&#x2F;a&gt; were very useful helping me figure it out.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;organizing-code-into-cargo-workspaces&quot;&gt;Organizing code into cargo workspaces&lt;a class=&quot;zola-anchor&quot; href=&quot;#organizing-code-into-cargo-workspaces&quot; aria-label=&quot;Anchor link for: organizing-code-into-cargo-workspaces&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;With some experience under my belt and a better understanding of where relative domains in the code should be separated by crate, I wanted to organize before writing new code. The first thing I did was separate the codebase into &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch14-03-cargo-workspaces.html#creating-a-workspace&quot;&gt;workspaces&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Separating into different crates would let me organize the struct conversion code from complicating the readability of the business logic code. This will make it easier to reuse patterns between the client and server side through importing the crates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;write-database-schema&quot;&gt;Write database schema&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-database-schema&quot; aria-label=&quot;Anchor link for: write-database-schema&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Because I need some kind of story to write code against, I decided to write an oil ordering system (because proto-diesel can be described as oil… har har…)&lt;&#x2F;p&gt;
&lt;p&gt;My postgres type &lt;code&gt;oil_product&lt;&#x2F;code&gt; has a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Oil_refinery#&#x2F;media&#x2F;File:Usesofpetroleum.png&quot;&gt;pie chart&lt;&#x2F;a&gt; of oil derived products that I got from the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Oil_refinery#Major_products&quot;&gt;wiki page of Oil Refinery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That helped me with my first thing: I need my database schema - &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;blob&#x2F;main&#x2F;cli-clap-grpc-pingcap-db-diesel&#x2F;workspace&#x2F;models&#x2F;schema.rs&quot;&gt;schema.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then I could write my migrations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;blob&#x2F;main&#x2F;cli-clap-grpc-pingcap-db-diesel&#x2F;workspace&#x2F;migrations&#x2F;2019-03-18-213310_create_orders&#x2F;up.sql&quot;&gt;up.sql&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;blob&#x2F;main&#x2F;cli-clap-grpc-pingcap-db-diesel&#x2F;workspace&#x2F;migrations&#x2F;2019-03-18-213310_create_orders&#x2F;down.sql&quot;&gt;down.sql&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;get-inserts-into-db-working&quot;&gt;Get inserts into DB working&lt;a class=&quot;zola-anchor&quot; href=&quot;#get-inserts-into-db-working&quot; aria-label=&quot;Anchor link for: get-inserts-into-db-working&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Second is getting inserts into the db working on the backend - &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;commit&#x2F;0e40e27529170b22f5419559ce8659f7a1a154f3#diff-149a61a7aa6246849298372d0b2f196e&quot;&gt;Link to specific commit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;backend.rs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a simple call from the backend to an internal function that performs the DB insert. After opening a connection, I test create a hardcoded order.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; conn = client::establish_connection();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_order = client::create_order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;conn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, schema::OilProductEnum::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;DIESEL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;create_order&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This insert only works once because the id is set to &lt;code&gt;1&lt;&#x2F;code&gt;. But the result is in insert of an order into the database, and returning the inserted &lt;code&gt;Order&lt;&#x2F;code&gt; from the function. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;create_order(conn : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgConnection, quantity : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, product_type : OilProductEnum) -&amp;gt; Order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_order = vec![
&lt;&#x2F;span&gt;&lt;span&gt;        Order {
&lt;&#x2F;span&gt;&lt;span&gt;            id : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            quantity : quantity,
&lt;&#x2F;span&gt;&lt;span&gt;            product_type : product_type,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    diesel::insert_into(orders::table)
&lt;&#x2F;span&gt;&lt;span&gt;        .values(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;new_order)
&lt;&#x2F;span&gt;&lt;span&gt;        .get_result(conn)
&lt;&#x2F;span&gt;&lt;span&gt;        .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Error saving new order&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;creating-user-input-structs-for-business-logic&quot;&gt;Creating user input structs for business logic&lt;a class=&quot;zola-anchor&quot; href=&quot;#creating-user-input-structs-for-business-logic&quot; aria-label=&quot;Anchor link for: creating-user-input-structs-for-business-logic&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;I created some structs solely for taking user input. It will converted to a proto form that will be used for gRPC calls&lt;&#x2F;p&gt;
&lt;p&gt;These structs didn&#x27;t include dynamic info like ids or timestamps, since those are generated right before insert on the server side.&lt;&#x2F;p&gt;
&lt;p&gt;Separate proto messages needed to be defined specifically for taking user input from the client-side.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;One of the business logic structs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;OrderForm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;quantity : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;product_type : OilProductEnum,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;The corresponding proto message definition&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;protobuf&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-protobuf &quot;&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;message OrderForm {
&lt;&#x2F;span&gt;&lt;span&gt;    int32 quantity = 2;
&lt;&#x2F;span&gt;&lt;span&gt;    OilProductType product = 3;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;converting-business-logic-struct-to-from-proto-generated-struct&quot;&gt;Converting business logic struct to&#x2F;from proto-generated struct&lt;a class=&quot;zola-anchor&quot; href=&quot;#converting-business-logic-struct-to-from-proto-generated-struct&quot; aria-label=&quot;Anchor link for: converting-business-logic-struct-to-from-proto-generated-struct&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;I implemented the &lt;code&gt;From&lt;&#x2F;code&gt; trait to convert my custom type to protobuf types for the grpc client calls (and vice-versa). The &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.From.html&quot;&gt;From&lt;&#x2F;a&gt; trait gives us the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.Into.html&quot;&gt;Into&lt;&#x2F;a&gt; implementation for free.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Convert from the protos to our type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;refinery::OrderForm&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;OrderForm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;from(proto_form : refinery::OrderForm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        OrderForm {
&lt;&#x2F;span&gt;&lt;span&gt;            quantity : proto_form.get_quantity(),
&lt;&#x2F;span&gt;&lt;span&gt;            product_type : OilProductEnum::from(proto_form.get_product()),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Convert from our type to the proto
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;OrderForm&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;refinery::OrderForm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;from(rust_form : OrderForm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; order = refinery::OrderForm::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        order.set_quantity(rust_form.quantity);
&lt;&#x2F;span&gt;&lt;span&gt;        order.set_product(refinery::OilProductType::from(rust_form.product_type));
&lt;&#x2F;span&gt;&lt;span&gt;        order
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Snippet from &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;blob&#x2F;main&#x2F;cli-clap-grpc-pingcap-db-diesel&#x2F;workspace&#x2F;models&#x2F;convert.rs&quot;&gt;convert.rs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;take-user-input-before-making-grpc-call&quot;&gt;Take user input before making gRPC call&lt;a class=&quot;zola-anchor&quot; href=&quot;#take-user-input-before-making-grpc-call&quot; aria-label=&quot;Anchor link for: take-user-input-before-making-grpc-call&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We want to take user input from a client, make a grpc backend call, then insert into the db from the backend.&lt;&#x2F;p&gt;
&lt;p&gt;We already have taken care of converting to and from proto forms, so this is focused on control flow now.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;move-inserts-into-grpc-server-endpoint&quot;&gt;Move inserts into gRPC server endpoint&lt;a class=&quot;zola-anchor&quot; href=&quot;#move-inserts-into-grpc-server-endpoint&quot; aria-label=&quot;Anchor link for: move-inserts-into-grpc-server-endpoint&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;Insert will occur after calling into the grpc server endpoint from the client-side.&lt;&#x2F;p&gt;
&lt;p&gt;On the client-side, I created a protobuf-generated struct with default values, for demonstrating the gRPC call to the backend works. I can easily take user input afterwards.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;receive-proto-struct-and-convert-into-db-insertable-struct&quot;&gt;Receive proto struct and convert into DB insertable struct&lt;a class=&quot;zola-anchor&quot; href=&quot;#receive-proto-struct-and-convert-into-db-insertable-struct&quot; aria-label=&quot;Anchor link for: receive-proto-struct-and-convert-into-db-insertable-struct&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;Lastly, I worked out taking in user input, and using it to instantiate one of my custom types. During the grpc backend call, I call .into() on my type, which will convert to the protobuf form. On the backend, I take in the request, and call &lt;code&gt;.into()&lt;&#x2F;code&gt; to convert back into my type so I can marshal into a diesel insert call.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Server-side&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m converting the proto-form struct &lt;code&gt;req&lt;&#x2F;code&gt; into the business logic form &lt;code&gt;OrderForm&lt;&#x2F;code&gt; by calling &lt;code&gt;.into()&lt;&#x2F;code&gt;. Since the &lt;code&gt;create_order()&lt;&#x2F;code&gt; impl takes in &lt;code&gt;OrderForm&lt;&#x2F;code&gt;, there is no need to annotate the type with &lt;code&gt;.into()&lt;&#x2F;code&gt; and we’re able to stay focused.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;RefineryService;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Refinery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;RefineryService {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; The client-side converts to refinery::OrderForm while calling this endpoint.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; But we convert the proto type back to our custom type right before adding to the database
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, ctx: RpcContext, req: refinery::OrderForm, sink: UnarySink&amp;lt;refinery::OrderStatus&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Creating the return object
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order_status = client::order_received_success();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f = sink
&lt;&#x2F;span&gt;&lt;span&gt;            .success(order_status.clone())
&lt;&#x2F;span&gt;&lt;span&gt;            .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;move |_| &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Responded with status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;{{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, order_status))
&lt;&#x2F;span&gt;&lt;span&gt;            .map_err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Failed to reply: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, err));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; conn = client::establish_connection();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Convert the received proto request into our native type
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _new_order = client::create_order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;conn, req.into());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ctx.spawn(f)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Function for creating order&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We take the business logic form &lt;code&gt;order_form&lt;&#x2F;code&gt; and use it to create the insertable struct &lt;code&gt;new_order&lt;&#x2F;code&gt; with all of the column values for Diesel to execute.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;create_order(conn : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgConnection, order_form : OrderForm) -&amp;gt; Order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; timestamp = NaiveDateTime::from_timestamp(Utc::now().timestamp(),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_order = vec![
&lt;&#x2F;span&gt;&lt;span&gt;        NewOrder {
&lt;&#x2F;span&gt;&lt;span&gt;            quantity : order_form.quantity,
&lt;&#x2F;span&gt;&lt;span&gt;            product_type : order_form.product_type,
&lt;&#x2F;span&gt;&lt;span&gt;            received_time : timestamp,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    diesel::insert_into(orders::table)
&lt;&#x2F;span&gt;&lt;span&gt;        .values(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;new_order)
&lt;&#x2F;span&gt;&lt;span&gt;        .get_result(conn)
&lt;&#x2F;span&gt;&lt;span&gt;        .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Error saving new order&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;do-it-again-in-reverse-for-queries&quot;&gt;Do it again, in reverse, for queries&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-it-again-in-reverse-for-queries&quot; aria-label=&quot;Anchor link for: do-it-again-in-reverse-for-queries&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;Last task to cover is repeating all of this work, but for making queries.&lt;&#x2F;p&gt;
&lt;p&gt;This ended up being slightly off pattern from implementing &lt;code&gt;From&lt;&#x2F;code&gt; traits, because I am returning a list of Orders, and the From trait apparently is not easily implemented for a Vec to the protobuf Rust equivilent. If I were planning on shipping this code somewhere other than for demonstration, I probably would spend more time implementing &lt;code&gt;From&lt;&#x2F;code&gt;. I ended up getting lazy, and wrapped the manual conversion in a function that loops and uses my already implemented From traits on the &lt;code&gt;Order&lt;&#x2F;code&gt; type. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;user input side&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This client subcommand from the cli requests all of the orders from the database, then prints out the protobuf form as a demonstration. The next step would be converting the protobuf list into a Vec of some non-protobuf generated type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(_matches) = matches.subcommand_matches(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;summary&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; empty_payload = protos::empty::Empty::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Send the gRPC message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; orders = client.get_all_records(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;empty_payload).expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;RPC Failed!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Print all records from database
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Order status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, orders);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;server endpoint&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The server takes in an empty proto type, so we don’t have to do any type conversions. We then call a function &lt;code&gt;client::get_all_orders()&lt;&#x2F;code&gt; that calls Diesel to return all the data in a table. Then we make another function call &lt;code&gt;client::db_query_to_proto()&lt;&#x2F;code&gt; to convert our native data into a gRPC sendable form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;get_all_records(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, ctx: RpcContext, _req: protos::empty::Empty, sink: UnarySink&amp;lt;refinery::OrderRecordList&amp;gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Received request for all of the order records&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; conn = client::establish_connection();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Call out to db
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query_results = client::get_all_orders(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;conn);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; This conversion pattern is different than the plain `From` traits, because we
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; have to handle the outer vector in a special way, but I want to be lazy
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed_query_proto = client::db_query_to_proto(query_results);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;println!(&amp;quot;Got results from the database: {:?}&amp;quot;, query_results);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f = sink
&lt;&#x2F;span&gt;&lt;span&gt;        .success(parsed_query_proto.clone())
&lt;&#x2F;span&gt;&lt;span&gt;        .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;move |_| &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Responded with list of records &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;{{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, parsed_query_proto))
&lt;&#x2F;span&gt;&lt;span&gt;        .map_err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Failed to reply: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, err));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ctx.spawn(f)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;database query&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This function queries for everything in the orders table. There&#x27;s nothing interesting here because Diesel handles everything. I just needed to annotate the type of vector that Diesel was going to return.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; get_all_orders is used by the backend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;get_all_orders(conn : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgConnection) -&amp;gt; Vec&amp;lt;Order&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query : Vec&amp;lt;Order&amp;gt; = orders::table.select(orders::all_columns)
&lt;&#x2F;span&gt;&lt;span&gt;    .order_by(orders::id)
&lt;&#x2F;span&gt;&lt;span&gt;    .load(conn)
&lt;&#x2F;span&gt;&lt;span&gt;    .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Error getting all order records&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    query
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;query to protobuf list&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You don&#x27;t need to use all of the Rust features all up front or not use Rust at all. We can all hopefully appreciate that this can still be understood.&lt;&#x2F;p&gt;
&lt;p&gt;I briefly tried to implement &lt;code&gt;From&lt;&#x2F;code&gt; for &lt;code&gt;Vec&amp;lt;Order&amp;gt;&lt;&#x2F;code&gt;, but it became evident that it was going to take a little more effort than I was willing to spend at this moment. I&#x27;m first to admit that this is a bit of a hack, but that&#x27;s fine for demonstration purposes. &lt;&#x2F;p&gt;
&lt;p&gt;Protobuf&#x27;s &lt;code&gt;repeated&lt;&#x2F;code&gt; keyword in the Rust code has its own type like &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; called &lt;code&gt;RepeatedField&lt;&#x2F;code&gt; and we are simply looping through and creating a &lt;code&gt;Vec&amp;lt;refinery::OrderRecord&amp;gt;&lt;&#x2F;code&gt; so we could use the conversion impl &lt;code&gt;from_vec&lt;&#x2F;code&gt;. The rest is for building the return data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; db_query_to_proto is used by the backend to convert a Vector of Order (from a Diesel select
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; query) into the proto native OrderRecordList. Implementing `From` for a Vector would have taken
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; longer, and used a wrapper type. That very well may be the more maintainable approach, but this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; was quicker…
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;db_query_to_proto(rust_record : Vec&amp;lt;Order&amp;gt;) -&amp;gt; refinery::OrderRecordList {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; proto_vec : Vec&amp;lt;refinery::OrderRecord&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F; Let&amp;#39;s take advantage of the `From` trait
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; rust_record {
&lt;&#x2F;span&gt;&lt;span&gt;        proto_vec.push(refinery::OrderRecord::from(r));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; proto_order = protobuf::RepeatedField::from_vec(proto_vec);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; proto_final = refinery::OrderRecordList::new();
&lt;&#x2F;span&gt;&lt;span&gt;    proto_final.set_order(proto_order);
&lt;&#x2F;span&gt;&lt;span&gt;    proto_final
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-conclusion&quot; aria-label=&quot;Anchor link for: in-conclusion&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Rust library support for gRPC is here. ORM support with Diesel-rs has been here for a while. But if you want to use gRPC and Diesel in the same project, maybe you can learn from my experience and be productive.&lt;&#x2F;p&gt;
&lt;p&gt;Do not primarily use the protobuf generated Rust types throughout your codebase. Especially if you plan on using Diesel-rs to deal with database inserts&#x2F;queries, because structs need to be 1:1 with your table schema for the smoothest experience using Diesel-rs.&lt;&#x2F;p&gt;
&lt;p&gt;Implement the &lt;code&gt;From&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Into&lt;&#x2F;code&gt; traits to more effectively convert between business logic structs and your protobuf generated Rust structs.&lt;&#x2F;p&gt;
&lt;p&gt;Convert to the proto Rust types only to send&#x2F;return data over gRPC calls and then immediately convert back to your business logic type on the receiving end.&lt;&#x2F;p&gt;
&lt;p&gt;You don&#x27;t need to write perfect Rust code in one go.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The code used throughout this post is located &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tjtelan&#x2F;rust-examples&#x2F;tree&#x2F;main&#x2F;cli-clap-grpc-pingcap-db-diesel&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a Unix-shell in Rust - Part 4</title>
		<published>2018-01-21T00:00:00+00:00</published>
		<updated>2018-01-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-4/" type="text/html"/>
		<id>https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-4/</id>
		<content type="html">&lt;p&gt;This is the 4th post in a running series about writing a simple unix shell in the Rust language. 
I suggest you catch up on the previous posts before reading ahead! &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;building-a-unix-shell-in-rust-part-1&#x2F;&quot;&gt;part 1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;building-a-unix-shell-in-rust-part-2&#x2F;&quot;&gt;part 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;building-a-unix-shell-in-rust-part-3&#x2F;&quot;&gt;part 3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Back to evaluating the parsed command. This time we are going to be implementing built-in functions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shell-builtins&quot;&gt;Shell builtins&lt;a class=&quot;zola-anchor&quot; href=&quot;#shell-builtins&quot; aria-label=&quot;Anchor link for: shell-builtins&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s quickly review how a shell works.
User is prompted for input. The input is tokenized (we are naively splitting on spaces). The first element of the tokenized input is the keyword, and the rest are the arguments. We execute the keyword with the arguments.&lt;&#x2F;p&gt;
&lt;p&gt;Our keywords correspond to either a shell function call (a builtin) or an external binary in your executable search path, which we will cover when we look to execute binaries in the next part. (In Bash, you can view this path by looking at the value of the environmental variable PATH. &lt;code&gt;$ echo ${PATH}&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Builtin keywords are functions that are implemented in the shell codebase. Calls to builtin commands are just local function calls. &lt;&#x2F;p&gt;
&lt;p&gt;In Bash, usually you can view what commands are implemented as shell functions with &lt;code&gt;$ man builtins&lt;&#x2F;code&gt;. (And some platforms use external binaries for many common builtins, rather than rely on the shell implementation)&lt;&#x2F;p&gt;
&lt;p&gt;Some common builtins, which we will implement are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;echo&lt;&#x2F;li&gt;
&lt;li&gt;history&lt;&#x2F;li&gt;
&lt;li&gt;cd&lt;&#x2F;li&gt;
&lt;li&gt;pwd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;my-initial-strategy&quot;&gt;My initial strategy&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-initial-strategy&quot; aria-label=&quot;Anchor link for: my-initial-strategy&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’m going to keep my strategy simple. When I input a command, I want to run the builtin command. If my input is not a builtin, then let’s throw an error saying the command isn’t found. This will set us up for when we execute binaries,.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing we want to do when we process the command is evaluate if it is a builtin. If it is, we want to pass arguments to the builtin function. &lt;&#x2F;p&gt;
&lt;p&gt;I’m scratching my head a little bit about how to represent the mapping of a keyword to a function in an idiomatic way.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve found the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;collections&#x2F;struct.HashMap.html&quot;&gt;HashMap&lt;&#x2F;a&gt; module, which is part of the standard collection library, but I’m looking to see if I can use something else that doesn’t require importing a library. I think what I want is an &lt;code&gt;enum&lt;&#x2F;code&gt; and I can pattern match to call builtin functions.&lt;&#x2F;p&gt;
&lt;p&gt;After a little bit of thought, I wondered if I could parse the string into the enum? My google-ing informs me that to accomplish this, I need to implement the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;str&#x2F;trait.FromStr.html&quot;&gt;fromStr&lt;&#x2F;a&gt; trait. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Builtin {
&lt;&#x2F;span&gt;&lt;span&gt;  Echo,
&lt;&#x2F;span&gt;&lt;span&gt;  History,
&lt;&#x2F;span&gt;&lt;span&gt;  Cd,
&lt;&#x2F;span&gt;&lt;span&gt;  Pwd
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;FromStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Builtin {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ec9b0;&quot;&gt;Err &lt;&#x2F;span&gt;&lt;span&gt;= ();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;from_str(s : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; s {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;echo&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ok(Builtin::Echo),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;history&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ok(Builtin::History),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;cd&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ok(Builtin::Cd),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;pwd&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ok(Builtin::Pwd),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Err(()),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how I use the enum to call the function if it is a builtin&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;process_command(c : Command) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Builtin::from_str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c.keyword) {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Builtin::Echo) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;builtin_echo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c.args),
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Builtin::History) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;builtin_history(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c.args),
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Builtin::Cd) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;builtin_cd(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c.args),
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Builtin::Pwd) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;builtin_pwd(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c.args),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;: command not found&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c.keyword);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here’s an example of one of the builtins. (I’m only going to show one with functionality, because I’m going to implement the rest later)
I chose to implement echo because it is very easy to verify. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;builtin_echo(args : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;String&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, args.join(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The number I&#x27;m returning signal that the command is done executing and represent the exit code of the command. 0 is conventionally a successful call, and anything else is an error. 
And here we are in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;    Finished debug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.0 secs
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;rust-shell`
&lt;&#x2F;span&gt;&lt;span&gt;% echo test test test
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: Raw input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;echo test test test\n&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: Split input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: keyword : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;echo&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: args : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;test test test
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: Exit code : 0
&lt;&#x2F;span&gt;&lt;span&gt;% not_a_real_command lkfjdslf lkjfwe
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: Raw input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;not_a_real_command lkfjdslf lkjfwe\n&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: Split input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;not_a_real_command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;lkfjdslf&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;lkjfwe&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: keyword : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;not_a_real_command&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: args : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;lkfjdslf&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;lkjfwe&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;not_a_real_command: command not found
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: Exit code : 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think I’m going to use this break to do some minor cleanup, write tests, and start using the rust logging mechanisms, such as the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;log&quot;&gt;log&lt;&#x2F;a&gt; crate. I’ll be back in the next post for running executables.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a Unix-shell in Rust - Part 3</title>
		<published>2017-12-31T00:00:00+00:00</published>
		<updated>2017-12-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-3/" type="text/html"/>
		<id>https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-3/</id>
		<content type="html">&lt;p&gt;This is the third post in a series on writing a simple shell in the Rust language. (I suggest you start from the &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;building-a-unix-shell-in-rust-part-1&#x2F;&quot;&gt;beginning&lt;&#x2F;a&gt;!) &lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;building-a-unix-shell-in-rust-part-2&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt; , I implemented a simple REPL that simply prints out debug output with the input split by whitespace.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In this post, I would like to take the opportunity to set up tests before much more complex functionality gets included. Consider this to be the first part of what potentially might be multiple posts about writing and organizing testing with &lt;code&gt;cargo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-testing-important&quot;&gt;Is testing important?&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-testing-important&quot; aria-label=&quot;Anchor link for: is-testing-important&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Program testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence. 
&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikiquote.org&#x2F;wiki&#x2F;Edsger_W._Dijkstra&quot;&gt;Edsger W. Dijkstra&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I don’t think it is controversial to say I think it is important. Good tests can help protect you from accidental regressions in functionality, and can be an added check on your assumptions, and manual testing. My intention is to write objective unit tests that will replace what I&#x27;ve been doing manually. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-write-the-tests-now-why-not-later&quot;&gt;Why write the tests now? Why not later?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-write-the-tests-now-why-not-later&quot; aria-label=&quot;Anchor link for: why-write-the-tests-now-why-not-later&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To be honest, I want the tests now because I’m looking for ways to use Rust for production code at work, and I need to get a feel for how a Rust codebase matures. As I am exploring Rust, I have come to be impressed with how easy &lt;code&gt;cargo test&lt;&#x2F;code&gt; makes it to write and execute tests.&lt;&#x2F;p&gt;
&lt;p&gt;It also will be less work to write test code for a small amount of code I just wrote now, rather than a larger amount of code later. Since it&#x27;s been my experience that testing will just become reactive. And I get to go back to writing new feature code sooner.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-started-with-unit-testing&quot;&gt;Getting started with unit testing&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-started-with-unit-testing&quot; aria-label=&quot;Anchor link for: getting-started-with-unit-testing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Testing is something that I always seem to go through with print statements, which is better than nothing, but not the most reliable way to be mindful of functionality regression. I would like to try to write more tests, as well as more functional code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;testing.html&quot;&gt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;testing.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;According to the official Rust handbook, for unit-style tests, like the what I would like to write, the convention is to create a &lt;code&gt;tests&lt;&#x2F;code&gt; module.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll cover integration tests in a later post, when I reorganize the project into different files. For now, I’m going to start slow and try to understand the new parts of Rust I get to use.&lt;&#x2F;p&gt;
&lt;p&gt;In the same file as the rest of my code, I add my test module with unit tests. I’m going to cover testing the &lt;code&gt;tokenize_command()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;main.rs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[cfg(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;unittest_tokenize_command {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[test]
&lt;&#x2F;span&gt;&lt;span&gt;    #[ignore]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;empty_command() {
&lt;&#x2F;span&gt;&lt;span&gt;      assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, tokenize_command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_string()).keyword)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[test]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;test_keyword() {
&lt;&#x2F;span&gt;&lt;span&gt;      assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, tokenize_command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_string()).keyword)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[test]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;no_arg() {
&lt;&#x2F;span&gt;&lt;span&gt;      assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, tokenize_command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_string()).args.len())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[test]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;one_arg() {
&lt;&#x2F;span&gt;&lt;span&gt;      assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, tokenize_command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test one&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_string()).args.len())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[test]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;multi_args() {
&lt;&#x2F;span&gt;&lt;span&gt;      assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, tokenize_command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test one two three&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_string()).args.len())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[test]
&lt;&#x2F;span&gt;&lt;span&gt;    #[ignore]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;quotes() {
&lt;&#x2F;span&gt;&lt;span&gt;      assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, tokenize_command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test \”one two\” three&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_string()).args.len())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;breakdown-of-test-module&quot;&gt;Breakdown of test module&lt;a class=&quot;zola-anchor&quot; href=&quot;#breakdown-of-test-module&quot; aria-label=&quot;Anchor link for: breakdown-of-test-module&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’ll introduce the new syntax.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;use-super&quot;&gt;use super::*&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-super&quot; aria-label=&quot;Anchor link for: use-super&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The use of &lt;code&gt;use&lt;&#x2F;code&gt; is new to me in Rust. I assume it means I am bringing in the namespace scope from outside to the top-level (instead of using &lt;code&gt;super::&lt;&#x2F;code&gt; at every function call) &lt;&#x2F;p&gt;
&lt;p&gt;Since the test module is an inner module, we need to bring the functions from the outside scope into the module’s local scope. We can do this individually, but we can just use &lt;code&gt;*&lt;&#x2F;code&gt; to pull them all in, even though I’m not going to be testing them all right now.&lt;&#x2F;p&gt;
&lt;p&gt;For more information about this usage, look at the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;crates-and-modules.html#re-exporting-with-pub-use&quot;&gt;Crates and Modules&lt;&#x2F;a&gt; page in the Rust documentation.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;attributes&quot;&gt;Attributes&lt;a class=&quot;zola-anchor&quot; href=&quot;#attributes&quot; aria-label=&quot;Anchor link for: attributes&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;#&lt;&#x2F;code&gt; lines are called &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;attributes.html&quot;&gt;attributes&lt;&#x2F;a&gt;. Attributes are defined by the compiler, and are used for different things. As of Rust 1.17, we currently we cannot create our own attributes. I’ll quickly describe the attributes we use, (but here’s the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;attributes.html&quot;&gt;reference&lt;&#x2F;a&gt; to all of the attributes.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;test&quot;&gt;#[test]&lt;a class=&quot;zola-anchor&quot; href=&quot;#test&quot; aria-label=&quot;Anchor link for: test&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;The &lt;code&gt;#[test]&lt;&#x2F;code&gt; attribute labels the functions as tests to the rust compiler. This is how &lt;code&gt;cargo test&lt;&#x2F;code&gt; knows what functions to run for tests.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;ignore&quot;&gt;#[ignore]&lt;a class=&quot;zola-anchor&quot; href=&quot;#ignore&quot; aria-label=&quot;Anchor link for: ignore&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;The &lt;code&gt;#[ignore]&lt;&#x2F;code&gt; attribute tells cargo to skip the test. (However, you can tell cargo to run the ignored tests by running &lt;code&gt;cargo test -- --ignored&lt;&#x2F;code&gt;) I am using this attribute, because as I started writing tests, I realized I hadn’t covered the functionality that would let the tests pass. I don’t want to forget to do this, so I’ll write the test now.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;cfg-test&quot;&gt;#[cfg(test)]&lt;a class=&quot;zola-anchor&quot; href=&quot;#cfg-test&quot; aria-label=&quot;Anchor link for: cfg-test&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;In &lt;code&gt;#[cfg(test)]&lt;&#x2F;code&gt;, we’re using the &lt;code&gt;cfg&lt;&#x2F;code&gt; attribute on the &lt;code&gt;unittest_tokenize_command&lt;&#x2F;code&gt; module. In our usage, the attribute tells the Rust compiler to compile the module only when we are compiling tests, like when we run &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;running-the-tests&quot;&gt;Running the tests&lt;a class=&quot;zola-anchor&quot; href=&quot;#running-the-tests&quot; aria-label=&quot;Anchor link for: running-the-tests&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We just need to run &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo test
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling rust-shell v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;telant&#x2F;src&#x2F;rust-shell)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished debug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.45 secs
&lt;&#x2F;span&gt;&lt;span&gt;     Running target&#x2F;debug&#x2F;deps&#x2F;rust_shell-cdb27ec22ae15a63
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 6 tests
&lt;&#x2F;span&gt;&lt;span&gt;test unittest_tokenize_command::empty_command ... ignored
&lt;&#x2F;span&gt;&lt;span&gt;test unittest_tokenize_command::quotes ... ignored
&lt;&#x2F;span&gt;&lt;span&gt;test unittest_tokenize_command::no_arg ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test unittest_tokenize_command::multi_args ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test unittest_tokenize_command::test_keyword ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test unittest_tokenize_command::one_arg ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 4 passed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;0 failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;2 ignored&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;0 measured
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we see that the all but our ignored tests pass, which is good enough for now!&lt;&#x2F;p&gt;
&lt;p&gt;In the next post, I’ll be covering evaluating built-in keywords.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a Unix-shell in Rust - Part 2</title>
		<published>2017-11-26T00:00:00+00:00</published>
		<updated>2017-11-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-2/" type="text/html"/>
		<id>https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-2/</id>
		<content type="html">&lt;p&gt;This is the 2nd part of a series where I document writing a command shell in Rust. In the &lt;a href=&quot;https:&#x2F;&#x2F;tjtelan.com&#x2F;blog&#x2F;building-a-unix-shell-in-rust-part-1&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt; I reviewed what a shell is, and broke that down into stages I can use to organize my code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-user-input&quot;&gt;Getting user input&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-user-input&quot; aria-label=&quot;Anchor link for: getting-user-input&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;First thing we need to do is create a project. Let’s use Cargo to create this for us.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo new --bin rust-shell
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For now, I&#x27;m going to assume we are only running interactively. So I&#x27;m just going to get a simple loop set up that asks for an input, and echoes it back to me.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; command = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdin().read_line(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; command)
&lt;&#x2F;span&gt;&lt;span&gt;      .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Failed to read in command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m using std::io to read input into the mutable command variable binding, then I println() to echo my input back to the screen.&lt;&#x2F;p&gt;
&lt;p&gt;Then we build:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling rust-shell v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;telant&#x2F;src&#x2F;rust-shell)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.25 secs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No errors.&lt;&#x2F;p&gt;
&lt;p&gt;And testing it out:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.0 secs
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;rust-shell`
&lt;&#x2F;span&gt;&lt;span&gt;123
&lt;&#x2F;span&gt;&lt;span&gt;123
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great. Looks like that was easy.&lt;&#x2F;p&gt;
&lt;p&gt;What we see here is me trying 2 commands: &lt;code&gt;123&lt;&#x2F;code&gt; and &lt;code&gt;test&lt;&#x2F;code&gt;. We see the command printed right back. (Printing a short prompt might make that more obvious… ) &lt;&#x2F;p&gt;
&lt;h3 id=&quot;parsing-the-input-into-tokens&quot;&gt;Parsing the input into tokens&lt;a class=&quot;zola-anchor&quot; href=&quot;#parsing-the-input-into-tokens&quot; aria-label=&quot;Anchor link for: parsing-the-input-into-tokens&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Next step is to break the user input from a single continuous string into smaller pieces that we can evaluate. &lt;&#x2F;p&gt;
&lt;p&gt;I am just going to tokenize the string using spaces as delimiters (because it is easy. It is, however, not always accurate, but, Dear Reader, I already know this is not the final way I am going to implement tokens. Splitting on spaces is too greedy of an approach. Quoted arguments are usually evaluated to be a single argument, including spaces, for uses that include passing entire raw strings to other programs. Let&#x27;s not get perfection distract us. I&#x27;ll stay focused on getting something that works...)&lt;&#x2F;p&gt;
&lt;p&gt;I actually ran into a little bit of trouble getting this working on a single line, with the original variable because of the type checker.&lt;&#x2F;p&gt;
&lt;p&gt;This did not work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling rust-shell v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;telant&#x2F;src&#x2F;rust-shell)
&lt;&#x2F;span&gt;&lt;span&gt;error[E0282]: unable to infer enough type information about `B`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;main.rs:11:41
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;{:?}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command.split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).collect());
&lt;&#x2F;span&gt;&lt;span&gt;   |                                         ^^^^^^^ cannot infer type for `B`
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: type annotations or generic parameter binding required
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m lazy, and I didn’t look into how to explicitly reference the type.&lt;&#x2F;p&gt;
&lt;p&gt;This did work. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command_split : Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = command.split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).collect();
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command_split);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the relevant output&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;test test test
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;test\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;blah blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;string in quotes&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;blah&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;blah&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;in&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;quotes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m going to have to learn how type inference works in Rust sooner or later, but I’m not going to deal with it now. String types in Rust are kind of confusing coming from Python where I don’t have to deal with types very often.&lt;&#x2F;p&gt;
&lt;p&gt;(This is a warning from the future. You should lightly understand the idiomatic difference between String and &amp;amp;str. You find this out the hard way when you get to refactoring… see you in the future)&lt;&#x2F;p&gt;
&lt;p&gt;I’m going to use this moment to make the interface a more obvious when the we are ready to take user input by printing a prompt character.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{self,Write};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; prompt_char = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;%&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    print!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{0} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prompt_char);
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdout().flush().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; command = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdin().read_line(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; command)
&lt;&#x2F;span&gt;&lt;span&gt;      .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Failed to read in command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command_split : Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = command.split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).collect();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command_split);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I added &lt;code&gt;DEBUG:&lt;&#x2F;code&gt; to our debug statements. Also I had to include a new &lt;code&gt;use&lt;&#x2F;code&gt;, use the &lt;code&gt;print!&lt;&#x2F;code&gt; macro, and flush the buffer so it would print to the screen immediately.&lt;&#x2F;p&gt;
&lt;p&gt;I got this pattern from the Rust docs for &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;1.4.0&#x2F;std&#x2F;macro.print!.html&quot;&gt;print!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.0 secs
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;rust-shell`
&lt;&#x2F;span&gt;&lt;span&gt;% Feeling a little more shell-like now
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Feeling a little more shell-like now\n&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Feeling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;little&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;more&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;shell-like&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;now\n&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;classifying-parsed-input&quot;&gt;Classifying parsed input&lt;a class=&quot;zola-anchor&quot; href=&quot;#classifying-parsed-input&quot; aria-label=&quot;Anchor link for: classifying-parsed-input&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Last thing I’m going to do is identify the keyword from the arguments, then I’ll do a little refactoring to help organize the new complexity. (I expect to do a little fighting with the borrow checker at this point.)&lt;&#x2F;p&gt;
&lt;p&gt;Getting the keyword is easy. I just need to pick off the first element of our tokenized command.&lt;&#x2F;p&gt;
&lt;p&gt;The arguments is a vector slice of everything but the first element of the command. Can I slice a vector as easily as slicing lists in Python? Yes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{self,Write};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;main() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; prompt_char = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;%&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    print!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{0} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prompt_char);
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdout().flush().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; command = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdin().read_line(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; command)
&lt;&#x2F;span&gt;&lt;span&gt;      .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Failed to read in command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: Raw input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command_split : Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = command.split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).collect();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: Split input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command_split);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; keyword = command_split[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arguments = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;command_split[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: Keyword: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, keyword);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: Number of arguments: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{0:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e3bbab;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;DEBUG: Arguments: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{1:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, arguments.len(), arguments);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have to call the slice by reference using &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; with the vector, and I specified the range I wanted to slice with the element I want to start from and &lt;code&gt;..&lt;&#x2F;code&gt; without an ending element. Rust figures out the bounds in this case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;time-to-refactor&quot;&gt;Time to refactor!&lt;a class=&quot;zola-anchor&quot; href=&quot;#time-to-refactor&quot; aria-label=&quot;Anchor link for: time-to-refactor&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’m going to make the main loop look a little more functional (inside the loop).&lt;&#x2F;p&gt;
&lt;p&gt;Printing the prompt? Easy. Function call.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;print_prompt() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; prompt_char = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;%&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  print!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{0} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prompt_char);
&lt;&#x2F;span&gt;&lt;span&gt;  io::stdout().flush().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reading the command from user input? I had to look up how to return variables. The style is to use an implicit return, and no semicolon. You can use &lt;code&gt;return&lt;&#x2F;code&gt;, but it isn&#x27;t very idiomatic. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;read_command() -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; command = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdin().read_line(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; command)
&lt;&#x2F;span&gt;&lt;span&gt;      .expect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;Failed to read in command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: Raw input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    command
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tokenizing the command? Gonna get a little more complicated. I’m going to set up a struct to represent the command so I can keep the tokenized command together in a single object.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;optional-first-fight-with-borrow-checker&quot;&gt;Optional : First fight with borrow checker&lt;a class=&quot;zola-anchor&quot; href=&quot;#optional-first-fight-with-borrow-checker&quot; aria-label=&quot;Anchor link for: optional-first-fight-with-borrow-checker&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I almost lost the motivation to continue the documenting my thought process because of this obstacle. This section can be skipped if you are looking to follow my happy path, and don&#x27;t want to follow my confusion. &lt;&#x2F;p&gt;
&lt;p&gt;(This is what I wrote first, when I was actually having a fight with the borrow checker…)&lt;&#x2F;p&gt;
&lt;p&gt;I have to learn a little bit about &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;lifetimes.html&quot;&gt;lifetimes&lt;&#x2F;a&gt; in order to get this to compile. This makes some sense, since the struct will need to own the slice data, and in the original code, we were just borrowing the slice.&lt;&#x2F;p&gt;
&lt;p&gt;I’m finding it confusing thinking about what I need to do in order to make the tokenizing function use the Command struct. If I can copy the args to the struct, and give ownership of the string to the struct, then I assume this will compile?&lt;&#x2F;p&gt;
&lt;p&gt;What type is the copied slice, and how do I specify that in the struct? How do I use the lifetime in code to find my use case? I don’t even know what other questions to ask next.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than try to figure out how to compile, and get the struct working with tokenizing the command, I’ll try to play around in main() and try instantiating my struct.&lt;&#x2F;p&gt;
&lt;p&gt;What I need to be able to do is copy the data in the vector. I tried for a while trying to pass ownership of a slice, but I ended up finding a way to take the first element out of the vector, and having the rest be the arguments be what is left. I feel a little over my head at this point, and I’m going to spend some time reading the docs.&lt;&#x2F;p&gt;
&lt;p&gt;This is what the struct looked like.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#608b4e;&quot;&gt;&#x2F;&#x2F;&#x2F; Bad.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Command &amp;lt;&amp;#39;a&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   keyword : String,
&lt;&#x2F;span&gt;&lt;span&gt;   arguments : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;&amp;amp;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason I went with this approach was I thought I could pass the ownership of the heap from when I split the command by whitespace. This was really not a good approach, and I wasted quite a lot of time fighting with the borrow checker.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;back-to-the-show&quot;&gt;Back to the show&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-to-the-show&quot; aria-label=&quot;Anchor link for: back-to-the-show&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I ended up changing the way I split the original command string so I would have a Vec&lt;String&gt; rather than Vec&amp;lt;&amp;amp;str&amp;gt;. Because String is owned and &amp;amp;str is borrowed, and the Command struct needs to own its data. &lt;&#x2F;p&gt;
&lt;p&gt;I think I have a much more straightforward function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Command {
&lt;&#x2F;span&gt;&lt;span&gt;  keyword : String,
&lt;&#x2F;span&gt;&lt;span&gt;  args : Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;tokenize_command(c : String) -&amp;gt; Command {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; command_split : Vec&amp;lt;String&amp;gt; = c.split_whitespace().map(|s| s.to_string()).collect();
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;DEBUG: Split input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b4cea8;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d69d85;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, command_split);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#569cd6;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command {
&lt;&#x2F;span&gt;&lt;span&gt;    keyword : command_split.remove(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b5cea8;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    args : command_split,
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  command
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before getting to the next step of evaluating the parsed command, I want to take a moment to learn how to set up tests that will run with the builds. See you next time. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a Unix-shell in Rust - Part 1</title>
		<published>2017-11-05T00:00:00+00:00</published>
		<updated>2017-11-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-1/" type="text/html"/>
		<id>https://tjtelan.com/blog/building-a-unix-shell-in-rust-part-1/</id>
		<content type="html">&lt;p&gt;My goal is to find more work opportunities to write in Rust the same way I can write in Python and Go. Since I spend a lot of time designing and executing automation, it felt useful to start somewhere familiar. How about a simple Unix shell? Yes, I use bash all the time.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than get this all worked out before posting, I&#x27;m going to document as much of my thought process in the design, as I have it. (But I am editing this to spare you the noisier stream-of-consciousness experience.)&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll have code snippets occasionally, but I&#x27;m trying to keep the audience around intermediate experience (where I consider myself to be today). I&#x27;m going to assume you use another programming language today to Get Shit Done, and use the terminal to do simple things, but not necessarily write shell scripts.&lt;&#x2F;p&gt;
&lt;p&gt;Why am I doing this? I don&#x27;t often see posts from beginning Rust learners doing practical, simple things (that can simply be copy&#x2F;pasted and modified slightly), like in the other more mature language communities... Widest market? Probably not. &lt;&#x2F;p&gt;
&lt;p&gt;I guess that&#x27;s enough rambling. Let’s dive in.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-s-a-shell&quot;&gt;What’s a shell?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-a-shell&quot; aria-label=&quot;Anchor link for: what-s-a-shell&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A shell is an interactive language interpreter that allows you to run text-based commands and translates them into an action, such as making internal function calls, or running external programs.&lt;&#x2F;p&gt;
&lt;p&gt;You usually use it to access resources from the operating system. &lt;&#x2F;p&gt;
&lt;p&gt;Additional to accepting a text command - it typically outputs text results and&#x2F;or causes some other side-effect.&lt;&#x2F;p&gt;
&lt;p&gt;You may know some of the name brand shells like the kind we&#x27;re making, a Unix shell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bourne-shell (sh)&lt;&#x2F;li&gt;
&lt;li&gt;bash&lt;&#x2F;li&gt;
&lt;li&gt;zsh&lt;&#x2F;li&gt;
&lt;li&gt;fish&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Or the windows specific:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Command Prompt (cmd.exe)&lt;&#x2F;li&gt;
&lt;li&gt;Powershell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Or interpreted languages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;python &lt;&#x2F;li&gt;
&lt;li&gt;lua&lt;&#x2F;li&gt;
&lt;li&gt;haskell &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Shells run in terminal emulators. This is (over-) simplified as the text-only window that runs your shell. &lt;&#x2F;p&gt;
&lt;p&gt;It handles the interaction from you (known as Standard-In, like keystrokes) and your shell (known as Standard-Out for the buffered&#x2F;flushed output style, and Standard-Error for the direct output style).&lt;&#x2F;p&gt;
&lt;p&gt;In most cases, the terminal emulator and shell are different processes (Windows’ cmd.exe and Powershell are confusingly, both the shell and terminal emulator) &lt;&#x2F;p&gt;
&lt;p&gt;You may have made reference to it by other common names such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;command prompt&lt;&#x2F;li&gt;
&lt;li&gt;terminal&lt;&#x2F;li&gt;
&lt;li&gt;console&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Examples of some terminal emulators&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;xterm&lt;&#x2F;li&gt;
&lt;li&gt;rxvt&lt;&#x2F;li&gt;
&lt;li&gt;iTerm&lt;&#x2F;li&gt;
&lt;li&gt;Terminal.app&lt;&#x2F;li&gt;
&lt;li&gt;Windows Command Prompt&lt;&#x2F;li&gt;
&lt;li&gt;Powershell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I’m going to focus on writing a bash-like shell. Functionality, and syntax should feel familiar. &lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The shells are a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;&#x2F;a&gt;, a Read-Eval-Print-Loop.&lt;&#x2F;p&gt;
&lt;p&gt;Typically, a character (let’s say ‘$’) is printed and a cursor blinks. This informs the user that a command can be typed in.&lt;&#x2F;p&gt;
&lt;p&gt;You type in a command.&lt;&#x2F;p&gt;
&lt;p&gt;You hit enter to translate the command into an action.&lt;&#x2F;p&gt;
&lt;p&gt;The output of the program prints to the screen.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;what-does-this-mean-for-me&quot;&gt;What does this mean for me?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-this-mean-for-me&quot; aria-label=&quot;Anchor link for: what-does-this-mean-for-me&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;It lets us quickly stub the code out into this REPL  pattern 
Our main function that will enter a loop. Inside the main loop, we request a command from the user, and do something. Then we do it all over again. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;breaking-down-the-steps&quot;&gt;Breaking down the steps&lt;a class=&quot;zola-anchor&quot; href=&quot;#breaking-down-the-steps&quot; aria-label=&quot;Anchor link for: breaking-down-the-steps&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;first-we-read&quot;&gt;First we Read&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-we-read&quot; aria-label=&quot;Anchor link for: first-we-read&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We need to take user input. Most shells print a symbol to signal to the user that we can input a command (as opposed to, for example, executing a command). I need to learn how to get a text command from the user. &lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start our definition of a command. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Command&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;a series of words separated by spaces.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#1e1e1e;color:#dcdcdc;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ keyword arg1 arg2 arg3… 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first word is a keyword. It&#x27;s either a built-in function or an executable on the filesystem, with the rest of the line being parameters passed to our function. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Keyword&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of 2 possibilities :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A built-in function to the shell (that is, calling a function in the code)&lt;&#x2F;li&gt;
&lt;li&gt;An executable
&lt;ul&gt;
&lt;li&gt;Either in one of the directories in your PATH&lt;&#x2F;li&gt;
&lt;li&gt;Or a filesystem path (relative or absolute)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;then-we-execute&quot;&gt;Then we Execute&lt;a class=&quot;zola-anchor&quot; href=&quot;#then-we-execute&quot; aria-label=&quot;Anchor link for: then-we-execute&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When we use a command that calls a built-in, we simply pass the arguments to the function, and return back to the start of the loop when it completes. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;and-when-we-call-an-executable&quot;&gt;And when we call an executable?&lt;a class=&quot;zola-anchor&quot; href=&quot;#and-when-we-call-an-executable&quot; aria-label=&quot;Anchor link for: and-when-we-call-an-executable&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We need to make a &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Fork_(system_call)&quot;&gt;fork&lt;&#x2F;a&gt; syscall, that is, create a new process for the executable to run in, so it can have its own memory space, and manage its own interactions with the operating system. (The shell is still the parent process) &lt;&#x2F;p&gt;
&lt;p&gt;To start a process inside the child process, we have to call the &lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Exec_(system_call)&quot;&gt;exec&lt;&#x2F;a&gt; syscall. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;then-we-process&quot;&gt;Then we Process&lt;a class=&quot;zola-anchor&quot; href=&quot;#then-we-process&quot; aria-label=&quot;Anchor link for: then-we-process&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is when we cause side-effects to the system.&lt;&#x2F;p&gt;
&lt;p&gt;We want to provide feedback to the user to let them know the results of this process. To keep this simple, we will only consider returning text to the user, as we are providing commands as text. &lt;&#x2F;p&gt;
&lt;p&gt;Our shell process has at least 3 file descriptors for passing input, or receiving output provided. Stdin, Stdout, and Stderr. I need to know how to do that purely with Rust. &lt;&#x2F;p&gt;
&lt;p&gt;After the process is complete, any output should be printed to the screen, via stdout or stderr.&lt;&#x2F;p&gt;
&lt;p&gt;Exit codes will be treated as binary for this exercise. It should be set to 0 if we exit without error. Otherwise the exit code will be 1.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lastly-we-loop&quot;&gt;Lastly, we Loop&lt;a class=&quot;zola-anchor&quot; href=&quot;#lastly-we-loop&quot; aria-label=&quot;Anchor link for: lastly-we-loop&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Return of control will go back to the user. The default user prompt will print as a visual cue (along with the typical blinking cursor) and we should be able to enter another command. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-coding-strategy&quot;&gt;The coding strategy&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-coding-strategy&quot; aria-label=&quot;Anchor link for: the-coding-strategy&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So then we&#x27;re running commands. Let&#x27;s review the strategy. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I need to know how to take input command in a loop. &lt;&#x2F;li&gt;
&lt;li&gt;I need to process the input to separate the keyword from the arguments &lt;&#x2F;li&gt;
&lt;li&gt;I need a way to call both builtins and executables. &lt;&#x2F;li&gt;
&lt;li&gt;The most abstract : I need to give the user feedback about the command run. (E. g. Print onto screen as appropriate and set an exit code of the command.) &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the next post, we&#x27;ll dive into using &lt;code&gt;cargo&lt;&#x2F;code&gt; and  start writing in Rust. &lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
